swagger: "3.0"
info:
  title: Jira
  description: Jira Cloud platform REST API documentation
  version: "1.0"
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_Atlassian_profile_image.png
  contact:
    email: ecosystem@atlassian.com
    x-twitter: Atlassian
servers:
  - url: https://your-domain.atlassian.com
host: your-domain.atlassian.com
basePath: /
schemes:
  - "https:"
paths:
  /rest/api/3/application-properties:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get application property
      description: >-
        Returns all application properties or an application property.


        If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: key
          description: The key of the application property.
          required: false
          schema:
            type: string
        - in: query
          name: permissionLevel
          description: The permission level of all items being returned in the list.
          required: false
          schema:
            type: string
        - in: query
          name: keyFilter
          description: When a `key` isn't provided, this filters the list of results by the
            application property `key` using a regular expression. For example,
            using `jira.lf.*` will return all application properties with keys
            that start with *jira.lf.*.
          required: false
          schema:
            type: string
  /rest/api/3/application-properties/advanced-settings:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get advanced settings
      description: >-
        Returns the application properties that are accessible on the *Advanced
        Settings* page. To navigate to the *Advanced Settings* page in Jira,
        choose the Jira icon > **Jira settings** > **System**, **General
        Configuration** and then click **Advanced Settings** (in the upper
        right).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/application-properties/{id}":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set application property
      description: >-
        Changes the value of an application property. For example, you can
        change the value of the `jira.clone.prefix` from its default value of
        *CLONE -* to *Clone -* if you prefer sentence case capitalization.
        Editable properties are described below along with their default values.


        #### Advanced settings ####


        The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).


        | Key | Description | Default value |  

        | -- | -- | -- |  

        | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  

        | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  

        | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  

        | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  

        | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  

        | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  

        | `jira.table.cols.subtasks` | The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue. | `issuetype, status, assignee, progress` |  

        | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  

        | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  

        | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  



        #### Look and feel ####


        The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).


        | Key | Description | Default value |  

        | -- | -- | -- |  

        | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  

        | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  

        | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  

        | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  

        | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  

        | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  

        | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  

        | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  

        | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  

        | `jira.lf.top.adg3.bgcolour` | The background color of the sidebar. | `#0747A6` |  

        | `jira.lf.top.adg3.textcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  

        | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  

        | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  

        | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  

        | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  



        #### Other settings ####


        | Key | Description | Default value |  

        | -- | -- | -- |  

        | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  



        *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/applicationrole:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all application roles
      description: >-
        Returns all application roles. In Jira, application roles are managed
        using the [Application access
        configuration](https://confluence.atlassian.com/x/3YxjL) page.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/applicationrole/{key}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get application role
      description: >-
        Returns an application role.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: key
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/attachment/meta:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get Jira attachment settings
      description: >-
        Returns the attachment settings, that is, whether attachments are
        enabled and the maximum attachment size allowed.


        Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
  "/rest/api/3/attachment/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete attachment
      description: >-
        Deletes an attachment from an issue.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:

         *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
         *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get attachment metadata
      description: >-
        Returns the metadata for an attachment. Note that the attachment itself
        is not returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/attachment/{id}/expand/human":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all metadata for an expanded attachment
      description: >-
        Returns the metadata for the contents of an attachment, if it is an
        archive, and metadata for the attachment itself. For example, if the
        attachment is a ZIP archive, then information about the files in the
        archive is returned and metadata for the ZIP archive. Currently, only
        the ZIP archive format is supported.


        Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** For the issue containing the attachment:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/attachment/{id}/expand/raw":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get contents metadata for an expanded attachment
      description: >-
        Returns the metadata for the contents of an attachment, if it is an
        archive. For example, if the attachment is a ZIP archive, then
        information about the files in the archive is returned. Currently, only
        the ZIP archive format is supported.


        Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** For the issue containing the attachment:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/auditing/record:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get audit records
      description: >-
        Returns a list of audit records. The list can be filtered to include
        items:

         *  containing a string in at least one field. For example, providing *up* will return all audit records where one or more fields contains words such as *update*.
         *  created on or after a date and time.
         *  created or or before a date and time.
         *  created during a time period.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: offset
          description: The number of records to skip before returning the first result.
          required: false
          schema:
            type: string
        - in: query
          name: limit
          description: The maximum number of results to return.
          required: false
          schema:
            type: string
        - in: query
          name: filter
          description: The query string.
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: The date and time on or after which returned audit records must have
            been created. If `to` is provided `from` must be before `to` or no
            audit records are returned.
          required: false
          schema:
            type: string
        - in: query
          name: to
          description: The date and time on or before which returned audit results must
            have been created. If `from` is provided `to` must be after `from`
            or no audit records are returned.
          required: false
          schema:
            type: string
  "/rest/api/3/avatar/{type}/system":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get system avatars by type
      description: >-
        Returns a list of system avatar details by owner type, where the owner
        types are issue type, project, or user.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: path
          name: type
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/comment/list:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Get comments by IDs
      description: >-
        Returns a [paginated](#pagination) list of just the comments for a list
        of comments specified by comment IDs.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Comments are returned where the user:

         *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `renderedBody` Returns the comment body rendered in HTML.
             *  `properties` Returns the comment's properties.
          required: false
          schema:
            type: string
  "/rest/api/3/comment/{commentId}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get comment property keys
      description: >-
        Returns the keys of all the properties of a comment.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: commentId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/comment/{commentId}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete comment property
      description: >-
        Deletes a comment property.


        **[Permissions](#permissions) required:** either of:

         *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
         *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.

        Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
      parameters:
        - in: path
          name: commentId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get comment property
      description: >-
        Returns the value of a comment property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: commentId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set comment property
      description: >-
        Creates or updates the value of a property for a comment. Use this
        resource to store custom data against a comment.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        **[Permissions](#permissions) required:** either of:

         *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
         *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.

        Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
      parameters:
        - in: path
          name: commentId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/component:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create component
      description: >-
        Creates a component. Use components to provide containers for issues
        within a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/component/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete component
      description: >-
        Deletes a component.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: moveIssuesTo
          description: The ID of the component to replace the deleted component. If this
            value is null no replacement is made.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get component
      description: >-
        Returns a component.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update component
      description: >-
        Updates a component. Any fields included in the request are overwritten.
        If `leadAccountId` is an empty string ("") the component lead is
        removed.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/component/{id}/relatedIssueCounts":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get component issues count
      description: |-
        Returns the counts of issues assigned to the component.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:** None.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/configuration:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get global settings
      description: >-
        Returns the [global settings](https://confluence.atlassian.com/x/qYXKM)
        in Jira. These settings determine whether optional features (for
        example, subtasks, time tracking, and others) are enabled. If time
        tracking is enabled, this operation also returns the time tracking
        configuration.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/configuration/timetracking:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get selected time tracking provider
      description: >-
        Returns the time tracking provider that is currently selected. Note that
        if time tracking is disabled, then a successful but empty response is
        returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Select time tracking provider
      description: >-
        Selects a time tracking provider.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/configuration/timetracking/list:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all time tracking providers
      description: >-
        Returns all time tracking providers. By default, Jira only has one time
        tracking provider: *JIRA provided time tracking*. However, you can
        install other time tracking providers via apps from the Atlassian
        Marketplace. For more information on time tracking providers, see the
        documentation for the [ Time Tracking
        Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/)
        module.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/configuration/timetracking/options:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get time tracking settings
      description: >-
        Returns the time tracking settings. This includes settings such as the
        time format, default time unit, and others. For more information, see
        [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set time tracking settings
      description: >-
        Sets the time tracking settings.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/customField/{fieldId}/option":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get options for field
      description: >-
        Returns a [paginated](#pagination) list of options and, where the custom
        select field is of the type *Select List (cascading)*, cascading options
        for custom select fields. Cascading options are included in the item
        count when determining pagination. Only options from the global context
        are returned.


        Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: path
          name: fieldId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create custom field options
      description: >-
        Creates options and, where the custom select field is of the type
        *Select List (cascading)*, cascading options for a custom select field.
        The options are added to the global context of the field.


        Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: fieldId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update custom field options
      description: >-
        Updates the options on a custom select field. Where an updated option is
        in use on an issue, the value on the issue is also updated. Options that
        are not found are ignored. A maximum of 1000 options, including
        sub-options of *Select List (cascading)* fields, can be updated per
        request. The options are updated on the global context of the field.


        Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: fieldId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/customFieldOption/{id}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get custom field option
      description: >-
        Returns a custom field option. For example, an option in a select list.


        Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The custom field option is returned as follows:

         *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/dashboard:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all dashboards
      description: >-
        Returns a list of dashboards owned by or shared with the user. The list
        may be filtered to include only favorite or owned dashboards.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: filter
          description: |-
            The filter applied to the list of dashboards. Valid values are:

             *  `favourite` Returns dashboards the user has marked as favorite.
             *  `my` Returns dashboards owned by the user.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create dashboard
      description: |-
        Creates a dashboard.

        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/dashboard/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Search for dashboards
      description: >-
        Returns a [paginated](#pagination) list of dashboards. This operation is
        similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that
        the results can be refined to include dashboards that have specific
        attributes. For example, dashboards with a particular name. When
        multiple attributes are specified only filters matching all attributes
        are returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:

         *  Dashboards owned by the user. Not returned for anonymous users.
         *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
         *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
         *  Dashboards shared with a public project.
         *  Dashboards shared with the public.
      parameters:
        - in: query
          name: dashboardName
          description: String used to perform a case-insensitive partial match with `name`.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: User account ID used to return dashboards with the matching
            `owner.accountId`. This parameter cannot be used with the `owner`
            parameter.
          required: false
          schema:
            type: string
        - in: query
          name: owner
          description: This parameter is deprecated because of privacy changes. Use
            `accountId` instead. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details. User name used to return dashboards with the matching
            `owner.name`. This parameter cannot be used with the `accountId`
            parameter.
          required: false
          schema:
            type: string
        - in: query
          name: groupname
          description: Group name used to returns dashboards that are shared with a group
            that matches `sharePermissions.group.name`.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: Project ID used to returns dashboards that are shared with a project
            that matches `sharePermissions.project.id`.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: >-
            [Order](#ordering) the results by a field:

             *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
             *  `favourite_count` Sorts by dashboard popularity.
             *  `id` Sorts by dashboard ID.
             *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
             *  `name` Sorts by dashboard name.
             *  `owner` Sorts by dashboard owner name.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            dashboard in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `description` Returns the description of the dashboard.
             *  `owner` Returns the owner of the dashboard.
             *  `viewUrl` Returns the URL that is used to view the dashboard.
             *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
             *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
             *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
          required: false
          schema:
            type: string
  "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get dashboard item property keys
      description: >-
        Returns the keys of all properties for a dashboard item.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the dashboard or be shared the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
      parameters:
        - in: path
          name: dashboardId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete dashboard item property
      description: >-
        Deletes a dashboard item property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
      parameters:
        - in: path
          name: dashboardId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get dashboard item property
      description: >-
        Returns the key and value of a dashboard item property.


        A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).


        When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.


        There is no resource to set or get dashboard items.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the dashboard or be shared the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
      parameters:
        - in: path
          name: dashboardId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set dashboard item property
      description: >-
        Sets the value of a dashboard item property. Use this resource in apps
        to store custom data against a dashboard item.


        A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).


        When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.


        There is no resource to set or get dashboard items.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
      parameters:
        - in: path
          name: dashboardId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: itemId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/dashboard/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete dashboard
      description: |-
        Deletes a dashboard.

        **[Permissions](#permissions) required:** None

        The dashboard to be deleted must be owned by the user.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get dashboard
      description: >-
        Returns a dashboard.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.


        However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update dashboard
      description: >-
        Updates a dashboard, replacing all the dashboard details with those
        provided.


        **[Permissions](#permissions) required:** None


        The dashboard to be updated must be owned by the user.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/dashboard/{id}/copy":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Copy dashboard
      description: >-
        Copies a dashboard. Any values provided in the `dashboard` parameter
        replace those in the copied dashboard.


        **[Permissions](#permissions) required:** None


        The dashboard to be copied must be owned by or shared with the user.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/expression/analyse:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Analyse Jira expression
      description: >-
        Analyses and validates Jira expressions.


        Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).


        **[Permissions](#permissions) required**: None.
      parameters: []
  /rest/api/3/expression/eval:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Evaluate Jira expression
      description: >-
        Evaluates a Jira expression and returns its value.


        This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.


        #### Context variables ####


        The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.

         *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
         *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The Connect app that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
         *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
         *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
         *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
         *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
         *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
         *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
         *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  

        Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information in the
            response. This parameter accepts `meta.complexity` that returns
            information about the expression complexity. For example, the number
            of expensive operations used by the expression and how close the
            expression is to reaching the [complexity
            limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions).
            Useful when designing and debugging your expressions.
          required: false
          schema:
            type: string
  /rest/api/3/field:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get fields
      description: >-
        Returns system and custom issue fields according to the following rules:

         *  Fields that cannot be added to the issue navigator are always returned.
         *  Fields that cannot be placed on an issue screen are always returned.
         *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
         *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create custom field
      description: >-
        Creates a custom field.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/field/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get fields paginated
      description: >-
        Returns a [paginated](#pagination) list of fields for Classic Jira
        projects. The list can include:

         *  all fields.
         *  specific fields, by defining `id`.
         *  fields that contain a string in the field name or description, by defining `query`.
         *  specific fields that contain a string in the field name or description, by defining `id` and `query`.

        Only custom fields can be queried, `type` must be set to `custom`.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: The type of fields to search.
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: The IDs of the custom fields to return or, where`query is specified,
            filter. IDs should be provided in the format customfield_XXXXX.`
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: String used to perform a case-insensitive partial match with field
            names or descriptions.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: >-
            [Order](#ordering) the results by a field:

             *  `contextsCount` Sorts by the number of contexts related to a field.
             *  `lastUsed` Sorts by the date when the value of the field last changed.
             *  `name` Sorts by the field name.
             *  `screensCount` Sorts by the number of screens related to a field.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `key` Returns the key for each field.
             *  `lastUsed` Returns the date when the value of the field last changed.
             *  `screensCount` Returns the number of screens related to a field.
             *  `contextsCount` Returns the number of contexts related to a field.
             *  `isLocked` Returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og).
          required: false
          schema:
            type: string
  "/rest/api/3/field/{fieldId}/contexts":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get contexts for a field
      description: >-
        Returns a [paginated](#pagination) list of the contexts a field is used
        in.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: path
          name: fieldId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/field/{fieldId}/screens":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get screens for a field
      description: >-
        Returns a [paginated](#pagination) list of the screens a field is used
        in.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: path
          name: fieldId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/field/{fieldKey}/option":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all issue field options
      description: >-
        Returns a [paginated](#pagination) list of all the options of a select
        list issue field. A select list issue field is a type of [issue
        field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/)
        that enables a user to select a value from a list of options.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create issue field option
      description: >-
        Creates an option for a select list issue field.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
      parameters:
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/field/{fieldKey}/option/suggestions/edit":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get selectable issue field options
      description: >-
        Returns a [paginated](#pagination) list of options for a select list
        issue field that can be viewed and selected by the user.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: Filters the results to options that are only available in the
            specified project.
          required: false
          schema:
            type: string
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/field/{fieldKey}/option/suggestions/search":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get visible issue field options
      description: >-
        Returns a [paginated](#pagination) list of options for a select list
        issue field that can be viewed by the user.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: Filters the results to options that are only available in the
            specified project.
          required: false
          schema:
            type: string
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/field/{fieldKey}/option/{optionId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue field option
      description: >-
        Deletes an option from a select list issue field.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
      parameters:
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: optionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue field option
      description: >-
        Returns an option from a select list issue field.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
      parameters:
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: optionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update issue field option
      description: >-
        Updates or creates an option for a select list issue field. This
        operation requires that the option ID is provided when creating an
        option, therefore, the option ID needs to be specified as a path and
        body parameter. The option ID provided in the path and body must be
        identical.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
      parameters:
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: optionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/field/{fieldKey}/option/{optionId}/issue":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Replace issue field option
      description: >-
        Deselects an issue-field select-list option from all issues where it is
        selected. A different option can be selected to replace the deselected
        option. The update can also be limited to a smaller set of issues by
        using a JQL query.


        This is an [asynchronous operation](#async). The response object contains a link to the long-running task.


        Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
      parameters:
        - in: query
          name: replaceWith
          description: The ID of the option that will replace the currently selected option.
          required: false
          schema:
            type: string
        - in: query
          name: jql
          description: A JQL query that specifies the issues to be updated. For example,
            *project=10000*.
          required: false
          schema:
            type: string
        - in: path
          name: fieldKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: optionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/fieldconfiguration:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all field configurations
      description: >-
        Returns a [paginated](#pagination) list of all field configurations.


        Only field configurations used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: The list of field configuration IDs. To include multiple IDs,
            provide an ampersand-separated list. For example,
            `id=10000&id=10001`.
          required: false
          schema:
            type: string
        - in: query
          name: isDefault
          description: If *true* returns the default field configuration only.
          required: false
          schema:
            type: string
  "/rest/api/3/fieldconfiguration/{id}/fields":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get field configuration items
      description: >-
        Returns a [paginated](#pagination) list of all fields for a
        configuration.


        Only the fields from configurations used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/fieldconfigurationscheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all field configuration schemes
      description: >-
        Returns a [paginated](#pagination) list of field configuration schemes.


        Only field configuration schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: The list of field configuration scheme IDs. To include multiple IDs,
            provide an ampersand-separated list. For example,
            `id=10000&id=10001`.
          required: false
          schema:
            type: string
  /rest/api/3/fieldconfigurationscheme/mapping:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get field configuration issue type items
      description: >-
        Returns a [paginated](#pagination) list of field configuration issue
        type items.


        Only items used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: fieldConfigurationSchemeId
          description: "The list of field configuration scheme IDs. To include multiple
            field configuration schemes separate IDs with ampersand:
            `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`\
            ."
          required: false
          schema:
            type: string
  /rest/api/3/fieldconfigurationscheme/project:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get field configuration schemes for projects
      description: >-
        Returns a [paginated](#pagination) list of field configuration schemes
        and, for each scheme, a list of the projects that use it.


        The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.


        Only field configuration schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: "The list of project IDs. To include multiple projects, separate IDs
            with ampersand: `projectId=10000&projectId=10001`."
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Assign field configuration scheme to project
      description: >-
        Assigns a field configuration scheme to a project. If the field
        configuration scheme ID is `null`, the operation assigns the default
        field configuration scheme.


        Field configuration schemes can only be assigned to classic projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/filter:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get filters
      description: >-
        Returns all filters. Deprecated, use [ Search for
        filters](#api-rest-api-3-filter-search-get) that supports search and
        pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None, however, only the following filters are returned:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create filter
      description: >-
        Creates a filter. The filter is shared according to the [default share
        scope](#api-rest-api-3-filter-post). The filter is not selected as a
        favorite.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
  /rest/api/3/filter/defaultShareScope:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get default share scope
      description: >-
        Returns the default sharing settings for new filters and dashboards for
        a user.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set default share scope
      description: |-
        Sets the default sharing for new filters and dashboards for a user.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
  /rest/api/3/filter/favourite:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get favorite filters
      description: >-
        Returns the visible favorite filters of the user.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:

         *  owned by the user.
         *  shared with a group that the user is a member of.
         *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  shared with a public project.
         *  shared with the public.

        For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
  /rest/api/3/filter/my:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get my filters
      description: >-
        Returns the filters owned by the user. If `includeFavourites` is `true`,
        the user's visible favorite filters are also returned.


        **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:

         *  owned by the user.
         *  shared with a group that the user is a member of.
         *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  shared with a public project.
         *  shared with the public.

        For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
        - in: query
          name: includeFavourites
          description: Include the user's favorite filters in the response.
          required: false
          schema:
            type: string
  /rest/api/3/filter/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Search for filters
      description: >-
        Returns a [paginated](#pagination) list of filters. This operation is
        similar to [Get filters](#api-rest-api-3-filter-get) except that the
        results can be refined to include filters that have specific attributes.
        For example, filters with a particular name. When multiple attributes
        are specified only filters matching all attributes are returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: query
          name: filterName
          description: String used to perform a case-insensitive partial match with `name`.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: User account ID used to return filters with the matching
            `owner.accountId`. This parameter cannot be used with `owner`.
          required: false
          schema:
            type: string
        - in: query
          name: owner
          description: This parameter is deprecated because of privacy changes. Use
            `accountId` instead. See the [migration
            guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details. User name used to return filters with the matching
            `owner.name`. This parameter cannot be used with `accountId`.
          required: false
          schema:
            type: string
        - in: query
          name: groupname
          description: Group name used to returns filters that are shared with a group that
            matches `sharePermissions.group.groupname`.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: Project ID used to returns filters that are shared with a project
            that matches `sharePermissions.project.id`.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: >-
            [Order](#ordering) the results by a field:

             *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
             *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
             *  `is_favourite` Sorts by whether the filter is marked as a favorite.
             *  `id` Sorts by filter ID.
             *  `name` Sorts by filter name.
             *  `owner` Sorts by the ID of the filter owner.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `description` Returns the description of the filter.
             *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
             *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
             *  `jql` Returns the JQL query that the filter uses.
             *  `owner` Returns the owner of the filter.
             *  `searchUrl` Returns a URL to perform the filter's JQL query.
             *  `sharePermissions` Returns the share permissions defined for the filter.
             *  `subscriptions` Returns the users that are subscribed to the filter.
             *  `viewUrl` Returns a URL to view the filter.
          required: false
          schema:
            type: string
  "/rest/api/3/filter/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete filter
      description: >-
        Delete a filter.


        **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get filter
      description: >-
        Returns a filter.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:

         *  owned by the user.
         *  shared with a group that the user is a member of.
         *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  shared with a public project.
         *  shared with the public.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update filter
      description: >-
        Updates a filter. Use this operation to update a filter's name,
        description, JQL, or sharing.


        **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/filter/{id}/columns":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Reset columns
      description: >-
        Reset the user's column configuration for the filter to the default.


        **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get columns
      description: >-
        Returns the columns configured for a filter. The column configuration is
        used when the filter's results are viewed in *List View* with the
        *Columns* set to *Filter*.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None, however, column details are only returned for:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set columns
      description: >-
        Sets the columns for a filter. Only navigable fields can be set as
        columns. Use [Get fields](#api-rest-api-3-field-get) to get the list
        fields in Jira. A navigable field has `navigable` set to `true`.


        The parameters for this resource are expressed as HTML form data. For example, in curl:


        `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`


        **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/filter/{id}/favourite":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Remove filter as favorite
      description: >-
        Removes a filter as a favorite for the user. Note that this operation
        only removes filters visible to the user from the user's favorites list.
        For example, if the user favorites a public filter that is subsequently
        made private (and is therefore no longer visible on their favorites
        list) they cannot remove it from their favorites list.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Add filter as favorite
      description: >-
        Add a filter as a favorite for the user.


        **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            filter in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
             *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/filter/{id}/permission":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get share permissions
      description: >-
        Returns the share permissions for a filter. A filter can be shared with
        groups, projects, all logged-in users, or the public. Sharing with all
        logged-in users or the public is known as a global share permission.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None, however, share permissions are only returned for:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add share permission
      description: >-
        Add a share permissions to a filter. If you add a global share
        permission (one for all logged-in users or the public) it will overwrite
        all share permissions for the filter.


        Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).


        **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/filter/{id}/permission/{permissionId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete share permission
      description: >-
        Deletes a share permission from a filter.


        **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: permissionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get share permission
      description: >-
        Returns a share permission for a filter. A filter can be shared with
        groups, projects, all logged-in users, or the public. Sharing with all
        logged-in users or the public is known as a global share permission.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None, however, a share permission is only returned for:

         *  filters owned by the user.
         *  filters shared with a group that the user is a member of.
         *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
         *  filters shared with a public project.
         *  filters shared with the public.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: permissionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/group:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Remove group
      description: >-
        Deletes a group.


        **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
      parameters:
        - in: query
          name: groupname
          description: The name of the group.
          required: true
          schema:
            type: string
        - in: query
          name: swapGroup
          description: The group to transfer restrictions to. Only comments and worklogs
            are transferred. If restrictions are not transferred, comments and
            worklogs are inaccessible after the deletion.
          required: false
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get group
      description: >-
        This operation is deprecated, use
        [`group/member`](#api-rest-api-3-group-member-get).


        Returns all users in a group.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: groupname
          description: The name of the group.
          required: true
          schema:
            type: string
        - in: query
          name: expand
          description: List of fields to expand.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create group
      description: >-
        Creates a group.


        **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
      parameters: []
  /rest/api/3/group/bulk:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Bulk get groups
      description: >-
        Returns a [paginated](#pagination) list of the groups specified by one
        or more group IDs.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: groupId
          description: The ID of a group. To specify multiple groups, pass multiple
            `groupId` parameters. For example,
            `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.
          required: true
          schema:
            type: string
  /rest/api/3/group/member:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get users from group
      description: >-
        Returns a [paginated](#pagination) list of all users in a group.


        Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: groupname
          description: The name of the group.
          required: true
          schema:
            type: string
        - in: query
          name: includeInactiveUsers
          description: Include inactive users.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/group/user:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Remove user from group
      description: >-
        Removes a user from a group.


        **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
      parameters:
        - in: query
          name: groupname
          description: The name of the group.
          required: true
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add user to group
      description: >-
        Adds a user to a group.


        **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
      parameters:
        - in: query
          name: groupname
          description: The name of the group (case sensitive).
          required: true
          schema:
            type: string
  /rest/api/3/groups/picker:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find groups
      description: >-
        Returns a list of groups whose names contain a query string. A list of
        group names can be provided to exclude groups from the results.


        The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.


        The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.
      parameters:
        - in: query
          name: accountId
          description: This parameter is deprecated, setting it does not affect the
            results. To find groups containing a particular user, use [Get user
            groups](#api-rest-api-3-user-groups-get).
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: The string to find in group names.
          required: false
          schema:
            type: string
        - in: query
          name: exclude
          description: A group to exclude from the result. To exclude multiple groups,
            provide an ampersand-separated list. For example,
            `exclude=group1&exclude=group2`.
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of groups to return. The maximum number of groups
            that can be returned is limited by the system property
            `jira.ajax.autocomplete.limit`.
          required: false
          schema:
            type: string
        - in: query
          name: userName
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
  /rest/api/3/groupuserpicker:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users and groups
      description: >-
        Returns a list of users and groups matching a string. The string is
        used:

         *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
         *  for groups, to find a case-sensitive match with group name.

        For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.


        Optionally, the search can be refined to:

         *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
            
             *  projects.
             *  issue types.
            
            If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
         *  not return Connect app users and groups.
         *  return groups that have a case-insensitive match with the query.

        The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: query
          name: query
          description: The search string.
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return in each list.
          required: false
          schema:
            type: string
        - in: query
          name: showAvatar
          description: Whether the user avatar should be returned. If an invalid value is
            provided, the default value is used.
          required: false
          schema:
            type: string
        - in: query
          name: fieldId
          description: The custom field ID of the field this request is for.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: The ID of a project that returned users and groups must have
            permission to view. To include multiple projects, provide an
            ampersand-separated list. For example,
            `projectId=10000&projectId=10001`. This parameter is only used when
            `fieldId` is present.
          required: false
          schema:
            type: string
        - in: query
          name: issueTypeId
          description: The ID of an issue type that returned users and groups must have
            permission to view. To include multiple issue types, provide an
            ampersand-separated list. For example,
            `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1`
            (all standard issue types) and `-2` (all subtask issue types), are
            supported. This parameter is only used when `fieldId` is present.
          required: false
          schema:
            type: string
        - in: query
          name: avatarSize
          description: The size of the avatar to return. If an invalid value is provided,
            the default value is used.
          required: false
          schema:
            type: string
        - in: query
          name: caseInsensitive
          description: Whether the search for groups should be case insensitive.
          required: false
          schema:
            type: string
        - in: query
          name: excludeConnectAddons
          description: Whether Connect app users and groups should be excluded from the
            search results. If an invalid value is provided, the default value
            is used.
          required: false
          schema:
            type: string
  /rest/api/3/issue:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create issue
      description: >-
        Creates an issue or, where the option to create subtasks is enabled in
        Jira, a subtask. A transition may be applied, to move the issue or
        subtask to a workflow step other than the default start step, and issue
        properties set.


        The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.


        Creating a subtask differs from creating an issue as follows:

         *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
         *  `parent` must contain the ID or key of the parent issue.

        In a next-gen project any issue may be made a child providing that the parent and child are members of the same project. In a classic project the parent field is only valid for subtasks.


        **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
      parameters:
        - in: query
          name: updateHistory
          description: Whether the project in which the issue is created is added to the
            user's **Recently viewed** project list, as shown under **Projects**
            in Jira.
          required: false
          schema:
            type: string
  /rest/api/3/issue/bulk:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Bulk create issue
      description: >-
        Creates issues and, where the option to create subtasks is enabled in
        Jira, subtasks. Transitions may be applied, to move the issues or
        subtasks to a workflow step other than the default start step, and issue
        properties set.


        The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.


        Creating a subtask differs from creating an issue as follows:

         *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
         *  `parent` the must contain the ID or key of the parent issue.

        **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
      parameters: []
  /rest/api/3/issue/createmeta:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get create issue metadata
      description: >-
        Returns details of projects, issue types within projects, and, when
        requested, the create screen fields for each issue type for the user.
        Use the information to populate the requests in [ Create
        issue](#api-rest-api-3-issue-post) and [Create
        issues](#api-rest-api-3-issue-bulk-post).


        The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
      parameters:
        - in: query
          name: projectIds
          description: List of project IDs. This parameter accepts a comma-separated list.
            Multiple project IDs can also be provided using an
            ampersand-separated list. For example,
            `projectIds=10000,10001&projectIds=10020,10021`. This parameter may
            be provided with `projectKeys`.
          required: false
          schema:
            type: string
        - in: query
          name: projectKeys
          description: List of project keys. This parameter accepts a comma-separated list.
            Multiple project keys can also be provided using an
            ampersand-separated list. For example,
            `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be
            provided with `projectIds`.
          required: false
          schema:
            type: string
        - in: query
          name: issuetypeIds
          description: List of issue type IDs. This parameter accepts a comma-separated
            list. Multiple issue type IDs can also be provided using an
            ampersand-separated list. For example,
            `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter
            may be provided with `issuetypeNames`.
          required: false
          schema:
            type: string
        - in: query
          name: issuetypeNames
          description: List of issue type names. This parameter accepts a comma-separated
            list. Multiple issue type names can also be provided using an
            ampersand-separated list. For example,
            `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter
            may be provided with `issuetypeIds`.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            issue metadata in the response. This parameter accepts
            `projects.issuetypes.fields`, which returns information about the
            fields in the issue creation screen for each issue type. Fields
            hidden from the screen are not returned. Use the information to
            populate the `fields` and `update` fields in [Create
            issue](#api-rest-api-3-issue-post) and [Create
            issues](#api-rest-api-3-issue-bulk-post).
          required: false
          schema:
            type: string
  /rest/api/3/issue/picker:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue picker suggestions
      description: >-
        Returns lists of issues matching a query string. Use this resource to
        provide auto-completion suggestions when the user is looking for an
        issue using a word or string.


        This operation returns two lists:

         *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
         *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: query
          description: A string to match against text fields in the issue such as title,
            description, or comments.
          required: false
          schema:
            type: string
        - in: query
          name: currentJQL
          description: A JQL query defining a list of issues to search for the query term.
            Note that `username` and `userkey` cannot be used as search terms
            for this parameter, due to privacy reasons. Use `accountId` instead.
          required: false
          schema:
            type: string
        - in: query
          name: currentIssueKey
          description: The key of an issue to exclude from search results. For example, the
            issue the user is viewing when they perform this query.
          required: false
          schema:
            type: string
        - in: query
          name: currentProjectId
          description: The ID of a project that suggested issues must belong to.
          required: false
          schema:
            type: string
        - in: query
          name: showSubTasks
          description: Indicate whether to include subtasks in the suggestions list.
          required: false
          schema:
            type: string
        - in: query
          name: showSubTaskParent
          description: When `currentIssueKey` is a subtask, whether to include the parent
            issue in the suggestions if it matches the query.
          required: false
          schema:
            type: string
  /rest/api/3/issue/properties:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Bulk set issues properties
      description: >-
        Sets the values of entity properties on issues. It can set up to 10
        entity properties on up to 10,000 issues.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.


        This operation is:

         *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
         *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters: []
  "/rest/api/3/issue/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Bulk delete issue property
      description: >-
        Deletes a property value from multiple issues. The issues to be updated
        can be specified by filter criteria.


        The criteria the filter used to identify eligible issues are:

         *  `entityIds` Only issues from this list are eligible.
         *  `currentValue` Only issues with the property set to this value are eligible.

        If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.


        If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.


        This operation is:

         *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
         *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

        **[Permissions](#permissions) required:**

         *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
      parameters:
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Bulk set issue property
      description: >-
        Sets a property value on multiple issues. The issues to be updated can
        be specified by a filter.


        The filter identifies issues eligible for update using these criteria:

         *  `entityIds` Only issues from this list are eligible.
         *  `currentValue` Only issues with the property set to this value are eligible.
         *  `hasProperty`:
            
             *  If *true*, only issues with the property are eligible.
             *  If *false*, only issues without the property are eligible.

        If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.


        If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).


        The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.


        This operation is:

         *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
         *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
      parameters:
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue
      description: >-
        Deletes an issue.


        An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: deleteSubtasks
          description: Whether the issue's subtasks are deleted when the issue is deleted.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue
      description: >-
        Returns the details for an issue.


        The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: fields
          description: >-
            A list of fields to return for the issue. This parameter accepts a
            comma-separated list. Use it to retrieve a subset of fields. Allowed
            values:

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            Examples:

             *  `summary,comment` Returns only the summary and comments fields.
             *  `-description` Returns all (default) fields except description.
             *  `*navigable,-comment` Returns all navigable fields except comment.

            This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.


            Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.
          required: false
          schema:
            type: string
        - in: query
          name: fieldsByKeys
          description: Whether fields in `fields` are referenced by keys rather than IDs.
            This parameter is useful where fields have been added by a connect
            app and a field's key may differ from its ID.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about the
            issues in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
          required: false
          schema:
            type: string
        - in: query
          name: properties
          description: >-
            A list of issue properties to return for the issue. This parameter
            accepts a comma-separated list. Allowed values:

             *  `*all` Returns all issue properties.
             *  Any issue property key, prefixed with a minus to exclude.

            Examples:

             *  `*all` Returns all properties.
             *  `*all,-prop1` Returns all properties except `prop1`.
             *  `prop1,prop2` Returns `prop1` and `prop2` properties.

            This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
          required: false
          schema:
            type: string
        - in: query
          name: updateHistory
          description: Whether the project in which the issue is created is added to the
            user's **Recently viewed** project list, as shown under **Projects**
            in Jira. This also populates the [JQL issues
            search](#api-rest-api-3-search-get) `lastViewed` field.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Edit issue
      description: >-
        Edits an issue. A transition may be applied and issue properties updated
        as part of the edit.


        The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).


        The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.


        Connect app users with admin permissions (from user permissions and app scopes) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: notifyUsers
          description: Whether a notification email about the issue update is sent to all
            watchers. To disable the notification, administer Jira or administer
            project permissions are required. If the user doesn't have the
            necessary permission the request is ignored.
          required: false
          schema:
            type: string
        - in: query
          name: overrideScreenSecurity
          description: Whether screen security should be overridden to enable hidden fields
            to be edited. Available to Connect app users with admin permissions.
          required: false
          schema:
            type: string
        - in: query
          name: overrideEditableFlag
          description: Whether screen security should be overridden to enable uneditable
            fields to be edited. Available to Connect app users with admin
            permissions.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/assignee":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Assign issue
      description: >-
        Assigns an issue to a user. Use this operation when the calling user
        does not have the *Edit Issues* permission but has the *Assign issue*
        permission for the project that the issue is in.


        If `name` or `accountId` is set to:

         *  `"-1"`, the issue is assigned to the default assignee for the project.
         *  `null`, the issue is set to unassigned.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/attachments":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add attachment
      description: >-
        Adds one or more attachments to an issue. Attachments are posted as
        multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).


        Note that:

         *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
         *  The name of the multipart/form-data parameter that contains the attachments must be `file`.

        The following example uploads a file called *myfile.txt* to the issue *TEST-123*:


        `curl -D- -u admin:admin -X POST -H "X-Atlassian-Token: no-check" -F "file=@myfile.txt" https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments`


        Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** 

         *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/changelog":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get change logs
      description: >-
        Returns a [paginated](#pagination) list of all changelogs for an issue
        sorted by date, starting from the oldest.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/comment":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get comments
      description: >-
        Returns all comments for an issue.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Comments are included in the response where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "[Order](#ordering) the results by a field. Accepts *created* to
            sort comments by their created date."
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add comment
      description: >-
        Adds a comment to an issue.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/comment/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete comment
      description: >-
        Deletes a comment.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
         *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get comment
      description: >-
        Returns a comment.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update comment
      description: >-
        Updates a comment.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
         *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            comments in the response. This parameter accepts `renderedBody`,
            which returns the comment body rendered in HTML.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/editmeta":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get edit issue metadata
      description: >-
        Returns the edit screen fields for an issue that are visible to and
        editable by the user. Use the information to populate the requests in
        [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).


        Connect app users with admin permissions (from user permissions and app scopes) can return additional details using:

         *  `overrideScreenSecurity` Returns hidden fields.
         *  `overrideEditableFlag` Returns uneditable fields. For example, where an issue has a workflow status of closed none of its fields are editable.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
      parameters:
        - in: query
          name: overrideScreenSecurity
          description: Whether hidden fields should be returned. Available to connect app
            users with admin permissions.
          required: false
          schema:
            type: string
        - in: query
          name: overrideEditableFlag
          description: Whether non-editable fields should be returned. Available to connect
            app users with admin permissions.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/notify":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Send notification for issue
      description: >-
        Creates an email notification for an issue and adds it to the mail
        queue.


        **[Permissions](#permissions) required:**

         *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue property keys
      description: >-
        Returns the URLs and keys of an issue's properties.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Property details are only returned where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue property
      description: >-
        Deletes an issue's property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue property
      description: >-
        Returns the key and value of an issue's property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set issue property
      description: >-
        Sets the value of an issue's property. Use this resource to store custom
        data against an issue.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/remotelink":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete remote issue link by global ID
      description: >-
        Deletes the remote issue link from the issue using the link's global ID.
        Where the global ID includes reserved URL characters these must be
        escaped in the request. For example, pass
        `system=http://www.mycompany.com/support&id=1` as
        `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.


        This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: globalId
          description: The global ID of a remote issue link.
          required: true
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get remote issue links
      description: >-
        Returns the remote issue links for an issue. When a remote issue link
        global ID is provided the record with that global ID is returned,
        otherwise all remote issue links are returned. Where a global ID
        includes reserved URL characters these must be escaped in the request.
        For example, pass `system=http://www.mycompany.com/support&id=1` as
        `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.


        This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: globalId
          description: The global ID of the remote issue link.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create or update remote issue link
      description: >-
        Creates or updates a remote issue link for an issue.


        If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.


        This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete remote issue link by ID
      description: >-
        Deletes a remote issue link from an issue.


        This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: linkId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get remote issue link by ID
      description: >-
        Returns a remote issue link for an issue.


        This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: linkId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update remote issue link by ID
      description: >-
        Updates a remote issue link for an issue.


        Note: Fields without values in the request are set to null.


        This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: linkId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/transitions":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get transitions
      description: >-
        Returns either all transitions or a transition that can be performed by
        the user on an issue, based on the issue's status.


        Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required: A list or transition is returned only when the user has:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            transitions in the response. This parameter accepts
            `transitions.fields`, which returns information about the fields in
            the transition screen for each transition. Fields hidden from the
            screen are not returned. Use this information to populate the
            `fields` and `update` fields in [Transition
            issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).
          required: false
          schema:
            type: string
        - in: query
          name: transitionId
          description: The ID of the transition.
          required: false
          schema:
            type: string
        - in: query
          name: skipRemoteOnlyCondition
          description: Whether transitions with the condition *Hide From User Condition*
            are included in the response.
          required: false
          schema:
            type: string
        - in: query
          name: includeUnavailableTransitions
          description: Whether details of transitions that fail a condition are included in
            the response
          required: false
          schema:
            type: string
        - in: query
          name: sortByOpsBarAndStatus
          description: Whether the transitions are sorted by ops-bar sequence value first
            then category order (Todo, In Progress, Done) or only by ops-bar
            sequence value.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Transition issue
      description: >-
        Performs an issue transition and, if the transition has a screen,
        updates the fields from the transition screen.


        sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/votes":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete vote
      description: >-
        Deletes a user's vote from an issue. This is the equivalent of the user
        clicking *Unvote* on an issue in Jira.


        This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get votes
      description: >-
        Returns details about the votes on an issue.


        This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add vote
      description: >-
        Adds the user's vote to an issue. This is the equivalent of the user
        clicking *Vote* on an issue in Jira.


        This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/watchers":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete watcher
      description: >-
        Deletes a user as a watcher of an issue.


        This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      parameters:
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*. Required.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue watchers
      description: >-
        Returns the watchers for an issue.


        This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add watcher
      description: >-
        Adds a user as a watcher of an issue by passing the account ID of the
        user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified
        the calling user is added.


        This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/worklog":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue worklogs
      description: >-
        Returns worklogs for an issue, starting from the oldest worklog or from
        the worklog started on or after a date and time.


        Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Workloads are only returned where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: startedAfter
          description: The worklog start date and time, as a UNIX timestamp in
            milliseconds, after which worklogs are returned.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            worklogs in the response. This parameter accepts`properties`, which
            returns worklog properties.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add worklog
      description: >-
        Adds a worklog to an issue.


        Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: notifyUsers
          description: Whether users watching the issue are notified by email.
          required: false
          schema:
            type: string
        - in: query
          name: adjustEstimate
          description: >-
            Defines how to update the issue's time estimate, the options are:

             *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
             *  `leave` Leaves the estimate unchanged.
             *  `manual` Reduces the estimate by amount specified in `reduceBy`.
             *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
          required: false
          schema:
            type: string
        - in: query
          name: newEstimate
          description: The value to set as the issue's remaining time estimate, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `new`.
          required: false
          schema:
            type: string
        - in: query
          name: reduceBy
          description: The amount to reduce the issue's remaining estimate by, as days
            (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required
            when `adjustEstimate` is `manual`.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            work logs in the response. This parameter accepts `properties`,
            which returns worklog properties.
          required: false
          schema:
            type: string
        - in: query
          name: overrideEditableFlag
          description: Whether the worklog entry should be added to the issue even if the
            issue is not editable, because jira.issue.editable set to false or
            missing. For example, the issue is closed. Only connect app users
            with admin scope permission can use this flag.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete worklog
      description: >-
        Deletes a worklog from an issue.


        Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: notifyUsers
          description: Whether users watching the issue are notified by email.
          required: false
          schema:
            type: string
        - in: query
          name: adjustEstimate
          description: >-
            Defines how to update the issue's time estimate, the options are:

             *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
             *  `leave` Leaves the estimate unchanged.
             *  `manual` Increases the estimate by amount specified in `increaseBy`.
             *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
          required: false
          schema:
            type: string
        - in: query
          name: newEstimate
          description: The value to set as the issue's remaining time estimate, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `new`.
          required: false
          schema:
            type: string
        - in: query
          name: increaseBy
          description: The amount to increase the issue's remaining estimate by, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `manual`.
          required: false
          schema:
            type: string
        - in: query
          name: overrideEditableFlag
          description: Whether the work log entry should be added to the issue even if the
            issue is not editable, because jira.issue.editable set to false or
            missing. For example, the issue is closed. Only connect app users
            with admin permissions can use this flag.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get worklog
      description: >-
        Returns a worklog.


        Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            work logs in the response. This parameter accepts


            `properties`, which returns worklog properties.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update worklog
      description: >-
        Updates a worklog.


        Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: query
          name: notifyUsers
          description: Whether users watching the issue are notified by email.
          required: false
          schema:
            type: string
        - in: query
          name: adjustEstimate
          description: >-
            Defines how to update the issue's time estimate, the options are:

             *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
             *  `leave` Leaves the estimate unchanged.
             *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
          required: false
          schema:
            type: string
        - in: query
          name: newEstimate
          description: The value to set as the issue's remaining time estimate, as days
            (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*.
            Required when `adjustEstimate` is `new`.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            worklogs in the response. This parameter accepts `properties`, which
            returns worklog properties.
          required: false
          schema:
            type: string
        - in: query
          name: overrideEditableFlag
          description: Whether the worklog should be added to the issue even if the issue
            is not editable. For example, because the issue is closed. Only
            connect app users with admin permissions can use this flag.
          required: false
          schema:
            type: string
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get worklog property keys
      description: >-
        Returns the keys of all properties for a worklog.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: worklogId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete worklog property
      description: >-
        Deletes a worklog property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: worklogId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get worklog property
      description: >-
        Returns the value of a worklog property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: worklogId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set worklog property
      description: >-
        Sets the value of a worklog property. Use this operation to store custom
        data against the worklog.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
         *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters:
        - in: path
          name: issueIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: worklogId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/issueLink:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create issue link
      description: >-
        Creates a link between two issues. Use this operation to indicate a
        relationship between two issues and optionally add a comment to the from
        (outward) issue. To use this resource the site must have [Issue
        Linking](https://confluence.atlassian.com/x/yoXKM) enabled.


        This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.


        If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
         *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
         *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
      parameters: []
  "/rest/api/3/issueLink/{linkId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue link
      description: >-
        Deletes an issue link.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
         *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
      parameters:
        - in: path
          name: linkId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue link
      description: >-
        Returns an issue link.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
      parameters:
        - in: path
          name: linkId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/issueLinkType:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue link types
      description: >-
        Returns a list of all issue link types.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
      parameters: []
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create issue link type
      description: >-
        Creates an issue link type. Use this operation to create descriptions of
        the reasons why issues are linked. The issue link type consists of a
        name and descriptions for a link's inward and outward relationships.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/issueLinkType/{issueLinkTypeId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue link type
      description: >-
        Deletes an issue link type.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueLinkTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue link type
      description: >-
        Returns an issue link type.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
      parameters:
        - in: path
          name: issueLinkTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update issue link type
      description: >-
        Updates an issue link type.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueLinkTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/issuesecurityschemes:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue security schemes
      description: >-
        Returns all [issue security
        schemes](https://confluence.atlassian.com/x/J4lKLg).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/issuesecurityschemes/{id}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue security scheme
      description: >-
        Returns an issue security scheme along with its security levels.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue security level members
      description: >-
        Returns issue security level members.


        Only issue security level members in context of classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: issueSecurityLevelId
          description: "The list of issue security level IDs. To include multiple issue
            security levels separate IDs with ampersand:
            `issueSecurityLevelId=10000&issueSecurityLevelId=10001`."
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Expand options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
        - in: path
          name: issueSecuritySchemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/issuetype:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all issue types for user
      description: >-
        Returns all issue types.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Issue types are only returned as follows:

         *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
         *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
      parameters: []
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create issue type
      description: >-
        Creates an issue type and adds it to the default issue type scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/issuetype/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue type
      description: >-
        Deletes the issue type. If the issue type is in use, all uses are
        updated with the alternative issue type (`alternativeIssueTypeId`). A
        list of alternative issue types are obtained from the [Get alternative
        issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: alternativeIssueTypeId
          description: The ID of the replacement issue type.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type
      description: >-
        Returns an issue type.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update issue type
      description: >-
        Updates the issue type.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetype/{id}/alternatives":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get alternative issue types
      description: >-
        Returns a list of issue types that can be used to replace the issue
        type. The alternative issue types are those assigned to the same
        workflow scheme, field configuration scheme, and screen scheme.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetype/{id}/avatar2":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Load issue type avatar
      description: >-
        Loads an avatar for the issue type.


        Specify the avatar's local file location in the body of the request. Also, include the following headers:

         *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
         *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

        For example:  

        `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`


        The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.


        The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.


        After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: x
          description: The X coordinate of the top-left corner of the crop region.
          required: false
          schema:
            type: string
        - in: query
          name: y
          description: The Y coordinate of the top-left corner of the crop region.
          required: false
          schema:
            type: string
        - in: query
          name: size
          description: The length of each side of the crop region.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetype/{issueTypeId}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type property keys
      description: >-
        Returns all the [issue type
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties)
        keys of the issue type.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
      parameters:
        - in: path
          name: issueTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue type property
      description: >-
        Deletes the [issue type
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type property
      description: >-
        Returns the key and value of the [issue type
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
      parameters:
        - in: path
          name: issueTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set issue type property
      description: >-
        Creates or updates the value of the [issue type
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        Use this resource to store and update data against an issue type.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/issuetypescheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all issue type schemes
      description: >-
        Returns a [paginated](#pagination) list of issue type schemes.


        Only issue type schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: The list of issue type schemes IDs. To include multiple IDs, provide
            an ampersand-separated list. For example, `id=10000&id=10001`.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create issue type scheme
      description: >-
        Creates an issue type scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/issuetypescheme/mapping:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type scheme items
      description: >-
        Returns a [paginated](#pagination) list of issue type scheme items.


        Only issue type scheme items used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: issueTypeSchemeId
          description: The list of issue type scheme IDs. To include multiple IDs, provide
            an ampersand-separated list. For example,
            `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
          required: false
          schema:
            type: string
  /rest/api/3/issuetypescheme/project:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type schemes for projects
      description: >-
        Returns a [paginated](#pagination) list of issue type schemes and, for
        each issue type scheme, a list of the projects that use it.


        Only issue type schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: The list of project IDs. To include multiple project IDs, provide an
            ampersand-separated list. For example,
            `projectId=10000&projectId=10001`.
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Assign issue type scheme to project
      description: >-
        Assigns an issue type scheme to a project.


        If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.


        Issue type schemes can only be assigned to classic projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue type scheme
      description: >-
        Deletes an issue type scheme.


        Only issue type schemes used in classic projects can be deleted.


        Any projects assigned to the scheme are reassigned to the default issue type scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeSchemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update issue type scheme
      description: >-
        Updates an issue type scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeSchemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Add issue types to issue type scheme
      description: >-
        Adds issue types to an issue type scheme.


        The added issue types are appended to the issue types list.


        If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeSchemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Change order of issue types
      description: >-
        Changes the order of issue types in an issue type scheme.


        The request body parameters must meet the following requirements:

         *  all of the issue types must belong to the issue type scheme.
         *  either `after` or `position` must be provided.
         *  the issue type in `after` must not be in the issue type list.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeSchemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue type from issue type scheme
      description: >-
        Deletes an issue type from an issue type scheme.


        This operation cannot delete:

         *  any issue type used by issues.
         *  any issue types from the default issue type scheme.
         *  the last standard issue type from an issue type scheme.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: issueTypeSchemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueTypeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/issuetypescreenscheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type screen schemes
      description: >-
        Returns a [paginated](#pagination) list of issue type screen schemes.


        Only issue type screen schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: The list of issue type screen scheme IDs. To include multiple IDs,
            provide an ampersand-separated list. For example,
            `id=10000&id=10001`.
          required: false
          schema:
            type: string
  /rest/api/3/issuetypescreenscheme/mapping:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type screen scheme items
      description: >-
        Returns a [paginated](#pagination) list of issue type screen scheme
        items.


        Only issue type screen schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: issueTypeScreenSchemeId
          description: "The list of issue type screen scheme IDs. To include multiple issue
            type screen schemes, separate IDs with ampersand:
            `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`."
          required: false
          schema:
            type: string
  /rest/api/3/issuetypescreenscheme/project:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue type screen schemes for projects
      description: >-
        Returns a [paginated](#pagination) list of issue type screen schemes
        and, for each issue type screen scheme, a list of the projects that use
        it.


        Only issue type screen schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: "The list of project IDs. To include multiple projects, separate IDs
            with ampersand: `projectId=10000&projectId=10001`."
          required: false
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Assign issue type screen scheme to project
      description: >-
        Assigns an issue type screen scheme to a project.


        Issue type screen schemes can only be assigned to classic projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/jql/autocompletedata:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get field reference data
      description: >-
        Returns reference data for JQL searches. This is a downloadable version
        of the documentation provided in [Advanced searching - fields
        reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced
        searching - functions
        reference](https://confluence.atlassian.com/x/hgORLQ), along with a list
        of JQL-reserved words. Use this information to assist with the
        programmatic creation of JQL queries or the validation of queries built
        in a custom query builder.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/jql/autocompletedata/suggestions:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get field auto complete suggestions
      description: >-
        Returns the JQL search auto complete suggestions for a field.


        Suggestions can be obtained by providing:

         *  `fieldName` to get a list of all values for the field.
         *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
         *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
         *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: fieldName
          description: The name of the field.
          required: false
          schema:
            type: string
        - in: query
          name: fieldValue
          description: The partial field item name entered by the user.
          required: false
          schema:
            type: string
        - in: query
          name: predicateName
          description: The name of the [ CHANGED operator
            predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED)
            for which the suggestions are generated. The valid predicate
            operators are *by*, *from*, and *to*.
          required: false
          schema:
            type: string
        - in: query
          name: predicateValue
          description: The partial predicate item name entered by the user.
          required: false
          schema:
            type: string
  /rest/api/3/jql/match:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Check issues against JQL
      description: >-
        Checks whether one or more issues would be returned by one or more JQL
        queries.


        **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters: []
  /rest/api/3/jql/parse:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Parse JQL query
      description: |-
        Parses and validates JQL queries.

        Validation is performed in context of the current user.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/jql/pdcleaner:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Convert user identifiers to account IDs in JQL queries
      description: >-
        Converts one or more JQL queries with user identifiers (username or user
        key) to equivalent JQL queries with account IDs.


        You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
  /rest/api/3/label:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all labels
      description: Returns a [paginated](#pagination) list of labels.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/mypermissions:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get my permissions
      description: >-
        Returns a list of permissions indicating which permissions the user has.
        Details of the user's permissions can be obtained in a global, project,
        or issue context.


        The user is reported as having a project permission:

         *  in the global context, if the user has the project permission in any project.
         *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
         *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.

        This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.


        Global permissions are unaffected by context.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: projectKey
          description: The key of project. Ignored if `projectId` is provided.
          required: false
          schema:
            type: string
        - in: query
          name: projectId
          description: The ID of project.
          required: false
          schema:
            type: string
        - in: query
          name: issueKey
          description: The key of the issue. Ignored if `issueId` is provided.
          required: false
          schema:
            type: string
        - in: query
          name: issueId
          description: The ID of the issue.
          required: false
          schema:
            type: string
        - in: query
          name: permissions
          description: A list of permission keys. (Required) This parameter accepts a
            comma-separated list. To get the list of available permissions, use
            [Get all permissions](#api-rest-api-3-permissions-get).
          required: false
          schema:
            type: string
        - in: query
          name: projectUuid
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
        - in: query
          name: projectConfigurationUuid
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
  /rest/api/3/mypreferences:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete preference
      description: >-
        Deletes a preference of the user, which restores the default value of
        system defined settings.


        Note that these keys are deprecated:

         *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
         *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.

        Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: key
          description: The key of the preference.
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get preference
      description: >-
        Returns the value of a preference of the current user.


        Note that these keys are deprecated:

         *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
         *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.

        Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: key
          description: The key of the preference.
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set preference
      description: >-
        Creates a preference for the user or updates a preference's value by
        sending a plain text string. For example, `false`. An arbitrary
        preference can be created with the value containing up to 255
        characters. In addition, the following keys define system preferences
        that can be set or created:

         *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
         *  *user.notify.own.changes* Whether the user gets notified of their own changes. Defaults to `false`.
         *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
         *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
         *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.

        Note that these keys are deprecated:

         *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
         *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.

        Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: key
          description: The key of the preference. The maximum length is 255 characters.
          required: true
          schema:
            type: string
  /rest/api/3/mypreferences/locale:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete locale
      description: >-
        Deprecated, use [ Update a user
        profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)
        from the user management REST API instead.


        Deletes the locale of the user, which restores the default setting.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get locale
      description: >-
        Returns the locale for the user.


        If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set locale
      description: >-
        Deprecated, use [ Update a user
        profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)
        from the user management REST API instead.


        Sets the locale of the user. The locale must be one supported by the instance of Jira.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
  /rest/api/3/myself:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get current user
      description: |-
        Returns details for the current user.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            user in the response. This parameter accepts a comma-separated list.
            Expand options include:

             *  `groups` Returns all groups, including nested groups, the user belongs to.
             *  `applicationRoles` Returns the application roles the user is assigned to.
          required: false
          schema:
            type: string
  /rest/api/3/notificationscheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get notification schemes paginated
      description: >-
        Returns a [paginated](#pagination) list of [notification
        schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by display
        name.


        ### About notification schemes ###


        A notification scheme is a list of events and recipients who will receive notifications for those events. The list is contained within the `notificationSchemeEvents` object and contains pairs of `events` and `notifications`:

         *  `event` Identifies the type of event. The events can be [Jira system events](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or [custom events](https://confluence.atlassian.com/x/AIlKLg).
         *  `notifications` Identifies the [recipients](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-recipientsRecipients) of notifications for each event. Recipients can be any of the following types:
            
             *  `CurrentAssignee`
             *  `Reporter`
             *  `CurrentUser`
             *  `ProjectLead`
             *  `ComponentLead`
             *  `User` (the `parameter` is the user key)
             *  `Group` (the `parameter` is the group name)
             *  `ProjectRole` (the `parameter` is the project role ID)
             *  `EmailAddress`
             *  `AllWatchers`
             *  `UserCustomField` (the `parameter` is the ID of the custom field)
             *  `GroupCustomField`(the `parameter` is the ID of the custom field)

        *Note that you should allow for events without recipients to appear in responses.*


        **[Permissions](#permissions) required:** Permission to access Jira, however the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about any custom fields assigned to receive an event.
             *  `group` Returns information about any groups assigned to receive an event.
             *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
             *  `projectRole` Returns information about any project roles assigned to receive an event.
             *  `user` Returns information about any users assigned to receive an event.
          required: false
          schema:
            type: string
  "/rest/api/3/notificationscheme/{id}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get notification scheme
      description: >-
        Returns a [notification
        scheme](https://confluence.atlassian.com/x/8YdKLg), including the list
        of events and the recipients who will receive notifications for those
        events.


        **[Permissions](#permissions) required:** Permission to access Jira, however the user must have permission to administer at least one project associated with the notification scheme.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about any custom fields assigned to receive an event.
             *  `group` Returns information about any groups assigned to receive an event.
             *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
             *  `projectRole` Returns information about any project roles assigned to receive an event.
             *  `user` Returns information about any users assigned to receive an event.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/permissions:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all permissions
      description: >-
        Returns all permissions, including:

         *  global permissions.
         *  project permissions.
         *  global permissions added by plugins.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/permissions/check:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Get bulk permissions
      description: >-
        Returns:

         *  for a list of global permissions, the global permissions granted to a user.
         *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.

        If no account ID is provided, the operation returns details for the logged in user.


        Note that:

         *  Invalid project and issue IDs are ignored.
         *  A maximum of 1000 projects and 1000 issues can be checked.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none.
      parameters: []
  /rest/api/3/permissions/project:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Get permitted projects
      description: >-
        Returns all the projects where the user is granted a list of project
        permissions.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/permissionscheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all permission schemes
      description: >-
        Returns all permission schemes.


        ### About permission schemes and grants ###


        A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.


        #### Holder object ####


        The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"`. The `holder` object is defined by the following properties:

         *  `type` Identifies the user or group (see the list of types below).
         *  `parameter` The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.

        The following `types` are available. The expected values for the `parameter` are given in parenthesis (some `types` may not have a `parameter`):

         *  `anyone` Grant for anonymous users.
         *  `applicationRole` Grant for users with access to the specified application (application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
         *  `assignee` Grant for the user currently assigned to an issue.
         *  `group` Grant for the specified group (group name).
         *  `groupCustomField` Grant for a user in the group selected in the specified custom field (custom field ID).
         *  `projectLead` Grant for a project lead.
         *  `projectRole` Grant for the specified project role (project role ID).
         *  `reporter` Grant for the user who reported the issue.
         *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
         *  `user` Grant for the specified user (user ID - historically this was the userkey but that is deprecated and the account ID should be used).
         *  `userCustomField` Grant for a user selected in the specified custom field (custom field ID).

        #### Built-in permissions ####


        The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.


        **Project permissions**

         *  `ADMINISTER_PROJECTS`
         *  `BROWSE_PROJECTS`
         *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
         *  `SERVICEDESK_AGENT` (Jira Service Desk only)
         *  `VIEW_DEV_TOOLS` (Jira Software only)
         *  `VIEW_READONLY_WORKFLOW`

        **Issue permissions**

         *  `ASSIGNABLE_USER`
         *  `ASSIGN_ISSUES`
         *  `CLOSE_ISSUES`
         *  `CREATE_ISSUES`
         *  `DELETE_ISSUES`
         *  `EDIT_ISSUES`
         *  `LINK_ISSUES`
         *  `MODIFY_REPORTER`
         *  `MOVE_ISSUES`
         *  `RESOLVE_ISSUES`
         *  `SCHEDULE_ISSUES`
         *  `SET_ISSUE_SECURITY`
         *  `TRANSITION_ISSUES`

        **Voters and watchers permissions**

         *  `MANAGE_WATCHERS`
         *  `VIEW_VOTERS_AND_WATCHERS`

        **Comments permissions**

         *  `ADD_COMMENTS`
         *  `DELETE_ALL_COMMENTS`
         *  `DELETE_OWN_COMMENTS`
         *  `EDIT_ALL_COMMENTS`
         *  `EDIT_OWN_COMMENTS`

        **Attachments permissions**

         *  `CREATE_ATTACHMENTS`
         *  `DELETE_ALL_ATTACHMENTS`
         *  `DELETE_OWN_ATTACHMENTS`

        **Time tracking permissions**

         *  `DELETE_ALL_WORKLOGS`
         *  `DELETE_OWN_WORKLOGS`
         *  `EDIT_ALL_WORKLOGS`
         *  `EDIT_OWN_WORKLOGS`
         *  `WORK_ON_ISSUES`

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            included when you specify any value. Expand options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create permission scheme
      description: >-
        Creates a new permission scheme. You can create a permission scheme with
        or without defining a set of permission grants.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            always included when you specify any value. Expand options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
  "/rest/api/3/permissionscheme/{schemeId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete permission scheme
      description: >-
        Deletes a permission scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get permission scheme
      description: |-
        Returns a permission scheme.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            included when you specify any value. Expand options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update permission scheme
      description: >-
        Updates a permission scheme. Below are some important things to note
        when using this resource:

         *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
         *  If you want to update only the name and description, then do not send a permissions list in the request.
         *  Sending an empty list will remove all permission grants from the permission scheme.

        If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).


        See [About permission schemes and grants](#about-permission-schemes) for more details.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            always included when you specify any value. Expand options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/permissionscheme/{schemeId}/permission":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get permission scheme grants
      description: |-
        Returns all permission grants for a permission scheme.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            always included when you specify any value. Expand options include:

             *  `permissions` Returns all permission grants for each permission scheme.
             *  `user` Returns information about the user who is granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `field` Returns information about the custom field granted the permission.
             *  `all` Returns all expandable information.
          required: false
          schema:
            type: string
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create permission grant
      description: >-
        Creates a permission grant in a permission scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            always included when you specify any value. Expand options include:

             *  `permissions` Returns all permission grants for each permission scheme.
             *  `user` Returns information about the user who is granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `field` Returns information about the custom field granted the permission.
             *  `all` Returns all expandable information.
          required: false
          schema:
            type: string
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete permission scheme grant
      description: >-
        Deletes a permission grant from a permission scheme. See [About
        permission schemes and grants](#about-permission-schemes) for more
        details.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: permissionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get permission scheme grant
      description: |-
        Returns a permission grant.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: expand
          description: >-
            Use expand to include additional information in the response. This
            parameter accepts a comma-separated list. Note that permissions are
            always included when you specify any value. Expand options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
        - in: path
          name: schemeId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: permissionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/priority:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get priorities
      description: |-
        Returns the list of all issue priorities.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
  "/rest/api/3/priority/{id}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get priority
      description: |-
        Returns an issue priority.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/project:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all projects
      description: >-
        Returns all projects visible to the user. Deprecated, use [ Get projects
        paginated](#api-rest-api-3-project-search-get) that supports search and
        pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expanded
            options include:

             *  `description` Returns the project description.
             *  `issueTypes` Returns all issue types associated with the project.
             *  `lead` Returns information about the project lead.
             *  `projectKeys` Returns all project keys associated with the project.
          required: false
          schema:
            type: string
        - in: query
          name: recent
          description: Returns the user's most recently accessed projects. You may specify
            the number of results to return up to a maximum of 20. If access is
            anonymous, then the recently accessed projects are based on the
            current HTTP session.
          required: false
          schema:
            type: string
        - in: query
          name: properties
          description: A list of project properties to return for the project. This
            parameter accepts a comma-separated list.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create project
      description: >-
        Creates a project based on a project type template, as shown in the
        following table:


        | Project Type Key | Project Template Key |  

        |--|--|  

        | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  

        | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-desk`, `com.atlassian.servicedesk:simplified-internal-service-desk`, `com.atlassian.servicedesk:simplified-external-service-desk` |  

        | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  

        The project types are available according to the installed Jira features as follows:

         *  Jira Core, the default, enables `business` projects.
         *  Jira Service Desk enables `service_desk` projects.
         *  Jira Software enables `software` projects.

        To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add JIRA Software or JIRA Service Desk into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/project/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get projects paginated
      description: >-
        Returns a [paginated](#pagination) list of projects visible to the user.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Projects are returned only where the user has one of:

         *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: >-
            [Order](#ordering) the results by a field.

             *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).
             *  `issueCount` Sorts by the total number of issues in each project.
             *  `key` Sorts by project key.
             *  `lastIssueUpdatedTime` Sorts by the last issue update time.
             *  `name` Sorts by project name.
             *  `owner` Sorts by project lead.
             *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
             *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: Filter the results using a literal string. Projects with a matching
            `key` or `name` are returned (case insensitive).
          required: false
          schema:
            type: string
        - in: query
          name: typeKey
          description: Orders results by the [project
            type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes).
            This parameter accepts a comma-separated list. Valid values are
            `business`, `service_desk`, and `software`.
          required: false
          schema:
            type: string
        - in: query
          name: categoryId
          description: The ID of the project's category. A complete list of category IDs is
            found using the [Get all project
            categories](#api-rest-api-3-projectCategory-get) operation.
          required: false
          schema:
            type: string
        - in: query
          name: searchBy
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
        - in: query
          name: action
          description: >-
            Filter results by projects for which the user can:

             *  `view` the project, meaning that they have one of the following permissions:
                
                 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
                 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
                 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
             *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
             *  `edit` the project, meaning that they have one of the following permissions:
                
                 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
                 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expanded
            options include:

             *  `description` Returns the project description.
             *  `projectKeys` Returns all project keys associated with a project.
             *  `lead` Returns information about the project lead.
             *  `issueTypes` Returns all issue types associated with the project.
             *  `url` Returns the URL associated with the project.
             *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: |-
            EXPERIMENTAL. Filter results by project status:

             *  `live` Search live projects.
             *  `archived` Search archived projects.
             *  `deleted` Search deleted projects, those in the recycle bin.
          required: false
          schema:
            type: string
  /rest/api/3/project/type:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all project types
      description: >-
        Returns all [project types](https://confluence.atlassian.com/x/Var1Nw),
        whether or not the instance has a valid license for each type.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/project/type/accessible:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get licensed project types
      description: Returns all [project types](https://confluence.atlassian.com/x/Var1Nw)
        with a valid license.
      parameters: []
  "/rest/api/3/project/type/{projectTypeKey}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project type by key
      description: |-
        Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:** None.
      parameters:
        - in: path
          name: projectTypeKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/type/{projectTypeKey}/accessible":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get accessible project type by key
      description: >-
        Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if
        it is accessible to the user.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: path
          name: projectTypeKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete project
      description: >-
        Deletes a project.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: enableUndo
          description: EXPERIMENTAL. Whether this project is placed in the Jira recycle bin
            where it will be available for restoration.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project
      description: >-
        Returns the [project details](https://confluence.atlassian.com/x/ahLpNw)
        for a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Note that
            the project description, issue types, and project lead are included
            in all responses by default. Expand options include:

             *  `description` The project description.
             *  `issueTypes` The issue types associated with the project.
             *  `lead` The project lead.
             *  `projectKeys` All project keys associated with the project.
             *  `issueTypeHierarchy` The project issue type hierarchy.
          required: false
          schema:
            type: string
        - in: query
          name: properties
          description: A list of project properties to return for the project. This
            parameter accepts a comma-separated list.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update project
      description: >-
        Updates the [project details](https://confluence.atlassian.com/x/ahLpNw)
        of a project.


        All parameters are optional in the body of the request.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Note that
            the project description, issue types, and project lead are included
            in all responses by default. Expand options include:

             *  `description` The project description.
             *  `issueTypes` The issue types associated with the project.
             *  `lead` The project lead.
             *  `projectKeys` All project keys associated with the project.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/avatar":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set project avatar
      description: >-
        Sets the avatar displayed for a project.


        Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/avatar/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete project avatar
      description: >-
        Deletes a custom avatar from a project. Note that system avatars cannot
        be deleted.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/avatar2":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Load project avatar
      description: >-
        Loads an avatar for a project.


        Specify the avatar's local file location in the body of the request. Also, include the following headers:

         *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
         *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

        For example:  

        `curl --request POST `


        `--user email@example.com:<api_token> `


        `--header 'X-Atlassian-Token: no-check' `


        `--header 'Content-Type: image/< image_type>' `


        `--data-binary "<@/path/to/file/with/your/avatar>" `


        `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`


        The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.


        The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.


        After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: query
          name: x
          description: The X coordinate of the top-left corner of the crop region.
          required: false
          schema:
            type: string
        - in: query
          name: y
          description: The Y coordinate of the top-left corner of the crop region.
          required: false
          schema:
            type: string
        - in: query
          name: size
          description: The length of each side of the crop region.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/avatars":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all project avatars
      description: >-
        Returns all project avatars, grouped by system and custom avatars.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/component":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project components paginated
      description: >-
        Returns a [paginated](#pagination) list of all components in a project.
        See the [Get project
        components](#api-rest-api-3-project-projectIdOrKey-components-get)
        resource if you want to get a full list of versions without pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: >-
            [Order](#ordering) the results by a field:

             *  `description` Sorts by the component description.
             *  `issueCount` Sorts by the count of issues associated with the component.
             *  `lead` Sorts by the user key of the component's project lead.
             *  `name` Sorts by component name.
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: Filter the results using a literal string. Components with a
            matching `name` or `description` are returned (case insensitive).
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/components":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project components
      description: >-
        Returns all components in a project. See the [Get project components
        paginated](#api-rest-api-3-project-projectIdOrKey-component-get)
        resource if you want to get a full list of components with pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/delete":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete project asynchronously
      description: >-
        Deletes a project asynchronously.


        This operation is:

         *  transactional, that is, if part of the delete fails the project is not deleted.
         *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project property keys
      description: >-
        Returns all [project
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties)
        keys for the project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete project property
      description: >-
        Deletes the
        [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties)
        from a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project property
      description: >-
        Returns the value of a [project
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set project property
      description: >-
        Sets the value of the [project
        property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        You can use project properties to store custom data against the project.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/restore":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Restore deleted project
      description: >-
        Restores a project from the Jira recycle bin.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/role":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project roles for project
      description: >-
        Returns a list of [project
        roles](https://confluence.atlassian.com/x/3odKLg) for the project
        returning the name and self URL for each role.


        Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/role/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete actors from project role
      description: >-
        Deletes actors from a project role for the project.


        To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: user
          description: The user account ID of the user to remove from the project role.
          required: false
          schema:
            type: string
        - in: query
          name: group
          description: The name of the group to remove from the project role.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project role for project
      description: >-
        Returns a project role's details and actors associated with the project.
        The list of actors is sorted by display name.


        To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add actors to project role
      description: >-
        Adds actors to a project role for the project.


        To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set actors for project role
      description: >-
        Sets the actors for a project role for a project, replacing all existing
        actors.


        To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/roledetails":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project role details
      description: >-
        Returns all [project roles](https://confluence.atlassian.com/x/3odKLg)
        and the details for each role. Note that the list of project roles is
        common to all projects.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: query
          name: currentMember
          description: Whether the roles should be filtered to include only those the user
            is assigned to.
          required: false
          schema:
            type: string
        - in: query
          name: excludeConnectAddons
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/statuses":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all statuses for project
      description: >-
        Returns the valid statuses for a project. The statuses are grouped by
        issue type, as each project has a set of valid issue types and each
        issue type has a set of valid statuses.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update project type
      description: >-
        Deprecated, this feature is no longer supported and no alternatives are
        available, see [Convert project to a different template or
        type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project
        type](https://confluence.atlassian.com/x/GwiiLQ). The project type can
        be updated for classic projects only, project type cannot be updated for
        next-gen projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: newProjectTypeKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/version":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project versions paginated
      description: >-
        Returns a [paginated](#pagination) list of all versions in a project.
        See the [Get project
        versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource
        if you want to get a full list of versions without pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: >-
            [Order](#ordering) the results by a field:

             *  `description` Sorts by version description.
             *  `name` Sorts by version name.
             *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
             *  `sequence` Sorts by the order of appearance in the user interface.
             *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: Filter the results using a literal string. Versions with matching
            `name` or `description` are returned (case insensitive).
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: A list of status values used to filter the results by version
            status. This parameter accepts a comma-separated list. The status
            values are `released`, `unreleased`, and `archived`.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `issuesstatus` Returns the number of issues in each status category for each version.
             *  `operations` Returns actions that can be performed on the specified version.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectIdOrKey}/versions":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project versions
      description: >-
        Returns all versions in a project. The response is not paginated. Use
        [Get project versions
        paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you
        want to get the versions in a project with pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information in the
            response. This parameter accepts `operations`, which returns actions
            that can be performed on the version.
          required: false
          schema:
            type: string
        - in: path
          name: projectIdOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectId}/email":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project's sender email
      description: >-
        Returns the [project's sender email
        address](https://confluence.atlassian.com/x/dolKLg).


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set project's sender email
      description: >-
        Sets the [project's sender email
        address](https://confluence.atlassian.com/x/dolKLg).


        If `emailAddress` is an empty string, the default email address is restored.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectId}/hierarchy":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project issue type hierarchy
      description: >-
        Get the issue type hierarchy for a next-gen project.


        The issue type hierarchy for a project consists of:

         *  *Epic* at level 1 (optional).
         *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
         *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.

        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      parameters:
        - in: path
          name: projectId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project issue security scheme
      description: >-
        Returns the [issue security
        scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the
        project.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: path
          name: projectKeyOrId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectKeyOrId}/notificationscheme":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project notification scheme
      description: >-
        Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg)
        associated with the project. See the [Get notification
        scheme](#api-rest-api-3-notificationscheme-id-get) resource for more
        information about notification schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about any custom fields assigned to receive an event.
             *  `group` Returns information about any groups assigned to receive an event.
             *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
             *  `projectRole` Returns information about any project roles assigned to receive an event.
             *  `user` Returns information about any users assigned to receive an event.
          required: false
          schema:
            type: string
        - in: path
          name: projectKeyOrId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectKeyOrId}/permissionscheme":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get assigned permission scheme
      description: >-
        Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg)
        associated with the project.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Note that
            permissions are included when you specify any value. Expand options
            include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
        - in: path
          name: projectKeyOrId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Assign permission scheme
      description: >-
        Assigns a permission scheme with a project. See [Managing project
        permissions](https://confluence.atlassian.com/x/yodKLg) for more
        information about permission schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Note that
            permissions are included when you specify any value. Expand options
            include:

             *  `all` Returns all expandable information.
             *  `field` Returns information about the custom field granted the permission.
             *  `group` Returns information about the group that is granted the permission.
             *  `permissions` Returns all permission grants for each permission scheme.
             *  `projectRole` Returns information about the project role granted the permission.
             *  `user` Returns information about the user who is granted the permission.
          required: false
          schema:
            type: string
        - in: path
          name: projectKeyOrId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/project/{projectKeyOrId}/securitylevel":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project issue security levels
      description: >-
        Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg)
        levels for the project that the user has access to.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
      parameters:
        - in: path
          name: projectKeyOrId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/projectCategory:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all project categories
      description: |-
        Returns all project categories.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create project category
      description: >-
        Creates a project category.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/projectCategory/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete project category
      description: >-
        Deletes a project category.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project category by ID
      description: |-
        Returns a project category.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update project category
      description: >-
        Updates a project category.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/projectvalidate/key:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Validate project key
      description: >-
        Validates a project key by confirming the key is a valid string and not
        in use.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: key
          description: The project key.
          required: false
          schema:
            type: string
  /rest/api/3/projectvalidate/validProjectKey:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get valid project key
      description: >-
        Validates a project key and, if the key is invalid or in use, generates
        a valid random string for the project key.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: key
          description: The project key.
          required: false
          schema:
            type: string
  /rest/api/3/projectvalidate/validProjectName:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get valid project name
      description: >-
        Checks that a project name isn't in use. If the name isn't in use, the
        passed string is returned. If the name is in use, this operation
        attempts to generate a valid project name based on the one supplied,
        usually by adding a sequence number. If a valid project name cannot be
        generated, a 404 response is returned.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: name
          description: The project name.
          required: true
          schema:
            type: string
  /rest/api/3/resolution:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get resolutions
      description: |-
        Returns a list of all issue resolution values.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
  "/rest/api/3/resolution/{id}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get resolution
      description: |-
        Returns an issue resolution value.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/role:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all project roles
      description: >-
        Gets a list of all project roles, complete with project role details and
        default actors.


        ### About project roles ###


        [Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).


        Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.


        #### Members and actors ####


        In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.


        Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole) of the project role or set at the project level:

         *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
         *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create project role
      description: >-
        Creates a new project role with no [default
        actors](#api-rest-api-3-resolution-get). You can use the [Add default
        actors to project role](#api-rest-api-3-role-id-actors-post) operation
        to add default actors to the project role after creating it.


        *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/role/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete project role
      description: >-
        Deletes a project role. You must specify a replacement project role if
        you wish to delete a project role that is in use.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: swap
          description: The ID of the project role that will replace the one being deleted.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get project role by ID
      description: >-
        Gets the project role details and the default actors associated with the
        role. The list of default actors is sorted by display name.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Partial update project role
      description: >-
        Updates either the project role's name or its description.


        You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Fully update project role
      description: >-
        Updates the project role's name and description. You must include both a
        name and a description in the request.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/role/{id}/actors":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete default actors from project role
      description: >-
        Deletes the [default actors](#api-rest-api-3-resolution-get) from a
        project role. You may delete a group or user, but you cannot delete a
        group and a user in the same request.


        Changing a project role's default actors does not affect project role members for projects already created.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: user
          description: The user account ID of the user to remove as a default actor.
          required: false
          schema:
            type: string
        - in: query
          name: group
          description: The group name of the group to be removed as a default actor.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get default actors for project role
      description: >-
        Returns the [default actors](#api-rest-api-3-resolution-get) for the
        project role.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add default actors to project role
      description: >-
        Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may
        add groups or users, but you cannot add groups and users in the same
        request.


        Changing a project role's default actors does not affect project role members for projects already created.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/screens:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all screens
      description: >-
        Returns a [paginated](#pagination) list of all screens.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  "/rest/api/3/screens/addToDefault/{fieldId}":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add field to default screen
      description: >-
        Adds a field to the default tab of the default screen.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: fieldId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/availableFields":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get available screen fields
      description: >-
        Returns the fields that can be added to a tab on a screen.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/tabs":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all screen tabs
      description: >-
        Returns the list of tabs for a screen.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
      parameters:
        - in: query
          name: projectKey
          description: The key of the project.
          required: false
          schema:
            type: string
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create screen tab
      description: >-
        Creates a tab for a screen.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/tabs/{tabId}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete screen tab
      description: >-
        Deletes a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update screen tab
      description: >-
        Updates the name of a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all screen tab fields
      description: >-
        Returns all fields for a screen tab.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
      parameters:
        - in: query
          name: projectKey
          description: The key of the project.
          required: false
          schema:
            type: string
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Add screen tab field
      description: >-
        Adds a field to a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Remove screen tab field
      description: >-
        Removes a field from a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Move screen tab field
      description: >-
        Moves a screen tab field.


        If `after` and `position` are provided in the request, `position` is ignored.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Move screen tab
      description: >-
        Moves a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: screenId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: tabId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: pos
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/screenscheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get screen schemes
      description: >-
        Returns a [paginated](#pagination) list of screen schemes.


        Only screen schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: The list of screen scheme IDs. To include multiple IDs, provide an
            ampersand-separated list. For example, `id=10000&id=10001`.
          required: false
          schema:
            type: string
  /rest/api/3/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Search for issues using JQL (GET)
      description: >-
        Searches for issues using
        [JQL](https://confluence.atlassian.com/x/egORLQ).


        If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Issues are included in the response where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters:
        - in: query
          name: jql
          description: >-
            The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines
            the search. Note:

             *  If no JQL expression is provided, all issues are returned.
             *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
             *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page. To manage page size,
            Jira may return fewer items per page where a large number of fields
            are requested. The greatest number of items returned per page is
            achieved when requesting `id` or `key` only.
          required: false
          schema:
            type: string
        - in: query
          name: validateQuery
          description: >-
            Determines how to validate the JQL query and treat the validation
            results. Supported values are:

             *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
             *  `warn` Returns all errors as warnings.
             *  `none` No validation is performed.
             *  `true` *Deprecated* A legacy synonym for `strict`.
             *  `false` *Deprecated* A legacy synonym for `warn`.

            Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
          required: false
          schema:
            type: string
        - in: query
          name: fields
          description: >-
            A list of fields to return for each issue, use it to retrieve a
            subset of fields. This parameter accepts a comma-separated list.
            Expand options include:

             *  `*all` Returns all fields.
             *  `*navigable` Returns navigable fields.
             *  Any issue field, prefixed with a minus to exclude.

            Examples:

             *  `summary,comment` Returns only the summary and comments fields.
             *  `-description` Returns all navigable (default) fields except description.
             *  `*all,-comment` Returns all fields except comments.

            This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.


            Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            issues in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `renderedFields` Returns field values rendered in HTML format.
             *  `names` Returns the display name of each field.
             *  `schema` Returns the schema describing a field type.
             *  `transitions` Returns all possible transitions for the issue.
             *  `operations` Returns all possible operations for the issue.
             *  `editmeta` Returns information about how each field can be edited.
             *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
             *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
          required: false
          schema:
            type: string
        - in: query
          name: properties
          description: A list of issue property keys for issue properties to include in the
            results. This parameter accepts a comma-separated list. Multiple
            properties can also be provided using an ampersand separated list.
            For example, `properties=prop1,prop2&properties=prop3`. A maximum of
            5 issue property keys can be specified.
          required: false
          schema:
            type: string
        - in: query
          name: fieldsByKeys
          description: Reference fields by their key (rather than ID).
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Search for issues using JQL (POST)
      description: >-
        Searches for issues using
        [JQL](https://confluence.atlassian.com/x/egORLQ).


        There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Issues are included in the response where the user has:

         *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
         *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      parameters: []
  "/rest/api/3/securitylevel/{id}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue security level
      description: >-
        Returns details of an issue security level.


        Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/serverInfo:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get Jira instance info
      description: |-
        Returns information about the Jira instance.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:** None.
      parameters: []
  /rest/api/3/settings/columns:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue navigator default columns
      description: >-
        Returns the default issue navigator columns.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set issue navigator default columns
      description: >-
        Sets the default issue navigator columns.


        The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:


        `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`


        If no column details are sent, then all default columns are removed.


        A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/status:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all statuses
      description: |-
        Returns a list of all statuses associated with workflows.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:** None.
      parameters: []
  "/rest/api/3/status/{idOrName}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get status
      description: >-
        Returns a status. The status must be associated with a workflow to be
        returned.


        If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.


        This operation can be accessed anonymously.


        [Permissions](#permissions) required: None.
      parameters:
        - in: path
          name: idOrName
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/statuscategory:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all status categories
      description: |-
        Returns a list of all status categories.

        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters: []
  "/rest/api/3/statuscategory/{idOrKey}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get status category
      description: >-
        Returns a status category. Status categories provided a mechanism for
        categorizing [statuses](#api-rest-api-3-status-idOrName-get).


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: path
          name: idOrKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/task/{taskId}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get task
      description: >-
        Returns the status of a [long-running asynchronous task](#async).


        When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.


        **[Permissions](#permissions) required:** either of:

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  Creator of the task.
      parameters:
        - in: path
          name: taskId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/task/{taskId}/cancel":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Cancel task
      description: >-
        Cancels a task.


        **[Permissions](#permissions) required:** either of:

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  Creator of the task.
      parameters:
        - in: path
          name: taskId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get avatars
      description: |-
        Returns the system and custom avatars for a project or issue type.

        This operation can be accessed anonymously.

        **[Permissions](#permissions) required:** None.
      parameters:
        - in: path
          name: type
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: entityId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Load avatar
      description: >-
        Loads a custom avatar for a project or issue type.


        Specify the avatar's local file location in the body of the request. Also, include the following headers:

         *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
         *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

        For example:  

        `curl --request POST `


        `--user email@example.com:<api_token> `


        `--header 'X-Atlassian-Token: no-check' `


        `--header 'Content-Type: image/< image_type>' `


        `--data-binary "<@/path/to/file/with/your/avatar>" `


        `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`


        The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.


        The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.


        After creating the avatar use:

         *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
         *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: x
          description: The X coordinate of the top-left corner of the crop region.
          required: false
          schema:
            type: string
        - in: query
          name: y
          description: The Y coordinate of the top-left corner of the crop region.
          required: false
          schema:
            type: string
        - in: query
          name: size
          description: The length of each side of the crop region.
          required: true
          schema:
            type: string
        - in: path
          name: type
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: entityId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete avatar
      description: >-
        Deletes an avatar from a project or issue type.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: type
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: owningObjectId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/user:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete user
      description: >-
        Deletes a user.


        **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: true
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: key
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user
      description: >-
        Returns a user.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*. Required.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: key
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            users in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `groups` includes all groups and nested groups to which the user belongs.
             *  `applicationRoles` includes details of all the applications to which the user has access.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create user
      description: >-
        Creates a user. This resource is retained for legacy compatibility. As
        soon as a more suitable alternative is available this resource will be
        deprecated.


        The option is provided to set or generate a password for the user. When using the option to generate a password, by omitting `password` from the request, include `"notification": "true"` to ensure the user is sent an email advising them that their account is created. This email includes a link for the user to set their password. If the notification isn't sent for a generated password, the user will need to be sent a reset password request from Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/user/assignable/multiProjectSearch:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users assignable to projects
      description: >-
        Returns a list of users who can be assigned issues in one or more
        projects. The list may be restricted to users whose attributes match a
        string.


        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.
      parameters:
        - in: query
          name: query
          description: A query string that is matched against user attributes, such as
            `displayName` and `emailAddress`, to find relevant users. The string
            can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: A query string that is matched exactly against user `accountId`.
            Required, unless `query` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: projectKeys
          description: A list of project keys (case sensitive). This parameter accepts a
            comma-separated list.
          required: true
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/user/assignable/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users assignable to issues
      description: >-
        Returns a list of users that can be assigned to an issue. Use this
        operation to find the list of users who can be assigned to:

         *  a new issue, by providing the `projectKeyOrId`.
         *  an updated issue, by providing the `issueKey`.
         *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).

        In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.


        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: query
          description: A query string that is matched against user attributes, such as
            `displayName`, and `emailAddress`, to find relevant users. The
            string can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `username` or `accountId` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: sessionId
          description: The sessionId of this request. SessionId is the same until the
            assignee is set.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: A query string that is matched exactly against user `accountId`.
            Required, unless `query` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: project
          description: The project ID or project key (case sensitive). Required, unless
            `issueKey` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: issueKey
          description: The key of the issue. Required, unless `project` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return. This operation may return
            less than the maximum number of items even if more are available.
            The operation fetches users up to the maximum and then, from the
            fetched users, returns only the users that can be assigned to the
            issue.
          required: false
          schema:
            type: string
        - in: query
          name: actionDescriptorId
          description: The ID of the transition.
          required: false
          schema:
            type: string
        - in: query
          name: recommend
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
  /rest/api/3/user/bulk:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Bulk get users
      description: >-
        Returns a [paginated](#pagination) list of the users specified by one or
        more account IDs.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: key
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: The account ID of a user. To specify multiple users, pass multiple
            `accountId` parameters. For example,
            `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
          required: true
          schema:
            type: string
  /rest/api/3/user/bulk/migration:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get account IDs for users
      description: >-
        Returns the account IDs for the users specified in the `key` or
        `username` parameters. Note that multiple `key` or `username` parameters
        can be specified.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: Username of a user. To specify multiple users, pass multiple copies
            of this parameter. For example, `username=fred&username=barney`.
            Required if `key` isn't provided. Cannot be provided if `key` is
            present.
          required: false
          schema:
            type: string
        - in: query
          name: key
          description: Key of a user. To specify multiple users, pass multiple copies of
            this parameter. For example, `key=fred&key=barney`. Required if
            `username` isn't provided. Cannot be provided if `username` is
            present.
          required: false
          schema:
            type: string
  /rest/api/3/user/columns:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Reset user default columns
      description: >-
        Resets the default [ issue table
        columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the
        system default. If `accountId` is not passed, the calling user's default
        columns are reset.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
         *  Permission to access Jira, to set the calling user's columns.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user default columns
      description: >-
        Returns the default [issue table
        columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If
        `accountId` is not passed in the request, the calling user's details are
        returned.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
         *  Permission to access Jira, to get the calling user's column details.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set user default columns
      description: >-
        Sets the default [ issue table
        columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an
        account ID is not passed, the calling user's default columns are set. If
        no column details are sent, then all default columns are removed.


        The parameters for this resource are expressed as HTML form data. For example, in curl:


        `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
         *  Permission to access Jira, to set the calling user's columns.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
  /rest/api/3/user/email:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user email
      description: Returns a user's email address. This API is only available to apps
        approved by Atlassian, according to these
        [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            `5b10ac8d82e05b22cc7d4ef5`.
          required: true
          schema:
            type: string
  /rest/api/3/user/email/bulk:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user email bulk
      description: Returns a user's email address. This API is only available to apps
        approved by Atlassian, according to these
        [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
      parameters:
        - in: query
          name: accountId
          description: The account IDs of the users for which emails are required. An
            `accountId` is an identifier that uniquely identifies the user
            across all Atlassian products. For example,
            `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an
            opaque identifier (that is, do not assume any structure in the
            value).
          required: true
          schema:
            type: string
  /rest/api/3/user/groups:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user groups
      description: >-
        Returns the groups to which a user belongs.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: true
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: key
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
  /rest/api/3/user/permission/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users with permissions
      description: >-
        Returns a list of users who fulfill these criteria:

         *  their user attributes match a search string.
         *  they have a set of permissions for a project or issue.

        If no search string is provided, a list of all users with the permissions is returned.


        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
         *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
      parameters:
        - in: query
          name: query
          description: A query string that is matched against user attributes, such as
            `displayName` and `emailAddress`, to find relevant users. The string
            can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: A query string that is matched exactly against user `accountId`.
            Required, unless `query` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: permissions
          description: >-
            A comma separated list of permissions. Permissions can be specified
            as any:

             *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).
             *  custom project permission added by Connect apps.
             *  (deprecated) one of the following:
                
                 *  ASSIGNABLE\_USER
                 *  ASSIGN\_ISSUE
                 *  ATTACHMENT\_DELETE\_ALL
                 *  ATTACHMENT\_DELETE\_OWN
                 *  BROWSE
                 *  CLOSE\_ISSUE
                 *  COMMENT\_DELETE\_ALL
                 *  COMMENT\_DELETE\_OWN
                 *  COMMENT\_EDIT\_ALL
                 *  COMMENT\_EDIT\_OWN
                 *  COMMENT\_ISSUE
                 *  CREATE\_ATTACHMENT
                 *  CREATE\_ISSUE
                 *  DELETE\_ISSUE
                 *  EDIT\_ISSUE
                 *  LINK\_ISSUE
                 *  MANAGE\_WATCHER\_LIST
                 *  MODIFY\_REPORTER
                 *  MOVE\_ISSUE
                 *  PROJECT\_ADMIN
                 *  RESOLVE\_ISSUE
                 *  SCHEDULE\_ISSUE
                 *  SET\_ISSUE\_SECURITY
                 *  TRANSITION\_ISSUE
                 *  VIEW\_VERSION\_CONTROL
                 *  VIEW\_VOTERS\_AND\_WATCHERS
                 *  VIEW\_WORKFLOW\_READONLY
                 *  WORKLOG\_DELETE\_ALL
                 *  WORKLOG\_DELETE\_OWN
                 *  WORKLOG\_EDIT\_ALL
                 *  WORKLOG\_EDIT\_OWN
                 *  WORK\_ISSUE
          required: true
          schema:
            type: string
        - in: query
          name: issueKey
          description: The issue key for the issue.
          required: false
          schema:
            type: string
        - in: query
          name: projectKey
          description: The project key for the project (case sensitive).
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/user/picker:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users for picker
      description: >-
        Returns a list of users whose attributes match the query term. The
        returned object includes the `html` field where the matched query term
        is highlighted with the HTML strong tag. A list of account IDs can be
        provided to exclude users from the results.


        This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
      parameters:
        - in: query
          name: query
          description: A query string that is matched against user attributes, such as
            `displayName`, and `emailAddress`, to find relevant users. The
            string can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*.
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return. The total number of matched
            users is returned in `total`.
          required: false
          schema:
            type: string
        - in: query
          name: showAvatar
          description: Include the URI to the user's avatar.
          required: false
          schema:
            type: string
        - in: query
          name: exclude
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: excludeAccountIds
          description: A list of account IDs to exclude from the search results. This
            parameter accepts a comma-separated list. Multiple account IDs can
            also be provided using an ampersand-separated list. For example,
            `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`.
            Cannot be provided with `exclude`.
          required: false
          schema:
            type: string
        - in: query
          name: avatarSize
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
        - in: query
          name: excludeConnectUsers
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
  /rest/api/3/user/properties:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user property keys
      description: >-
        Returns the keys of all properties for a user.


        Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
         *  Access to Jira, to access the calling user's property keys.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
        - in: query
          name: userKey
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
  "/rest/api/3/user/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete user property
      description: >-
        Deletes a property from a user.


        Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
         *  Access to Jira, to delete a property from the calling user's record.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
        - in: query
          name: userKey
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get user property
      description: >-
        Returns the value of a user's property. If no property key is provided
        [Get user property keys](#api-rest-api-3-user-properties-get) is called.


        Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
         *  Access to Jira, to get a property from the calling user's record.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
        - in: query
          name: userKey
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set user property
      description: >-
        Sets the value of a user's property. Use this resource to store custom
        data against a user.


        Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.


        **[Permissions](#permissions) required:**

         *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
         *  Access to Jira, to set a property on the calling user's record.
      parameters:
        - in: query
          name: accountId
          description: The account ID of the user, which uniquely identifies the user
            across all Atlassian products. For example,
            *5b10ac8d82e05b22cc7d4ef5*.
          required: false
          schema:
            type: string
        - in: query
          name: userKey
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/user/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users
      description: >-
        Returns a list of users that match the search string and property.


        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and property. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
      parameters:
        - in: query
          name: query
          description: A query string that is matched against user attributes (
            `displayName`, and `emailAddress`) to find relevant users. The
            string can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` or `property` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: Generated by shuffler.io OpenAPI
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: A query string that is matched exactly against a user `accountId`.
            Required, unless `query` or `property` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: property
          description: 'A query string used to search properties. Property keys are
            specified by path, so property keys containing dot (.) or equals (=)
            characters cannot be used. The query string cannot be specified
            using a JSON object. Example: To search for the value of `nested`
            from `{"something":{"nested":1,"other":2}}` use
            `thepropertykey.something.nested=1`. Required, unless `accountId` or
            `query` is specified.'
          required: false
          schema:
            type: string
  /rest/api/3/user/search/query:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users by query
      description: >-
        Finds users with a structured query and returns a
        [paginated](#pagination) list of user details.


        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        The query statements are:

         *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
         *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
         *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
         *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
         *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
         *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
         *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
         *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.

        The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:


        `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
      parameters:
        - in: query
          name: query
          description: The search query.
          required: true
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/user/search/query/key:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find user keys by query
      description: >-
        Finds users with a structured query and returns a
        [paginated](#pagination) list of user keys.


        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        The query statements are:

         *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
         *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
         *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
         *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
         *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
         *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
         *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
         *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.

        The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:


        `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
      parameters:
        - in: query
          name: query
          description: The search query.
          required: true
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/user/viewissue/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Find users with browse permission
      description: >-
        Returns a list of users who fulfill these criteria:

         *  their user attributes match a search string.
         *  they have permission to browse issues.

        Use this resource to find users who can browse:

         *  an issue, by providing the `issueKey`.
         *  any issue in a project, by providing the `projectKey`.

        This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
      parameters:
        - in: query
          name: query
          description: A query string that is matched against user attributes, such as
            `displayName` and `emailAddress`, to find relevant users. The string
            can match the prefix of the attribute's value. For example,
            *query=john* matches a user with a `displayName` of *John Smith* and
            a user with an `emailAddress` of *johnson@example.com*. Required,
            unless `accountId` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: username
          description: This parameter is no longer available and will be removed from the
            documentation soon. See the [deprecation
            notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
            for details.
          required: false
          schema:
            type: string
        - in: query
          name: accountId
          description: A query string that is matched exactly against user `accountId`.
            Required, unless `query` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: issueKey
          description: The issue key for the issue. Required, unless `projectKey` is
            specified.
          required: false
          schema:
            type: string
        - in: query
          name: projectKey
          description: The project key for the project (case sensitive). Required, unless
            `issueKey` is specified.
          required: false
          schema:
            type: string
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
  /rest/api/3/users:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all users default
      description: >-
        Returns a list of all (active and inactive) users.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return.
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return.
          required: false
          schema:
            type: string
  /rest/api/3/users/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all users
      description: >-
        Returns a list of all (active and inactive) users.


        **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return.
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return.
          required: false
          schema:
            type: string
  /rest/api/3/version:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create version
      description: >-
        Creates a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
      parameters: []
  "/rest/api/3/version/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete version
      description: >-
        Deletes a project version.


        Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.


        Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
      parameters:
        - in: query
          name: moveFixIssuesTo
          description: The ID of the version to update `fixVersion` to when the field
            contains the deleted version. The replacement version must be in the
            same project as the version being deleted and cannot be the version
            being deleted.
          required: false
          schema:
            type: string
        - in: query
          name: moveAffectedIssuesTo
          description: The ID of the version to update `affectedVersion` to when the field
            contains the deleted version. The replacement version must be in the
            same project as the version being deleted and cannot be the version
            being deleted.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get version
      description: >-
        Returns a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
      parameters:
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information about
            version in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `operations` Returns the list of operations available for this version.
             *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update version
      description: >-
        Updates a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/version/{id}/mergeto/{moveIssuesTo}":
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Merge versions
      description: >-
        Merges two project versions. The merge is completed by deleting the
        version specified in `id` and replacing any occurrences of its ID in
        `fixVersion` with the version ID specified in `moveIssuesTo`.


        Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: moveIssuesTo
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/version/{id}/move":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Move version
      description: >-
        Modifies the version's sequence within the project, which affects the
        display order of the versions in Jira.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/version/{id}/relatedIssueCounts":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get version's related issues count
      description: >-
        Returns the following counts for a version:

         *  Number of issues where the `fixVersion` is set to the version.
         *  Number of issues where the `affectedVersion` is set to the version.
         *  Number of issues where a version custom field is set to the version.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/version/{id}/removeAndSwap":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete and replace version
      description: >-
        Deletes a project version.


        Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/version/{id}/unresolvedIssueCount":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get version's unresolved issues count
      description: >-
        Returns counts of the issues and unresolved issues for the project
        version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/webhook:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete webhooks by ID
      description: >-
        Removes webhooks by ID. Only webhooks registered by the calling Connect
        app are removed. If webhooks created by other apps are specified, they
        are ignored.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      parameters: []
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get dynamic webhooks for app
      description: >-
        Returns a [paginated](#pagination) list of the webhooks registered by
        the calling app.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Register dynamic webhooks
      description: >-
        Registers webhooks.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      parameters: []
  /rest/api/3/webhook/failed:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get failed webhooks
      description: >-
        Returns webhooks that have recently failed to be delivered to the
        requesting app after the maximum number of retries.


        After 72 hours the failure may no longer be returned by this operation.


        The oldest failure is returned first.


        This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      parameters:
        - in: query
          name: maxResults
          description: The maximum number of webhooks to return per page. If obeying the
            maxResults directive would result in records with the same failure
            time being split across pages, the directive is ignored and all
            records with the same failure time included on the page.
          required: false
          schema:
            type: string
        - in: query
          name: after
          description: The time after which any webhook failure must have occurred for the
            record to be returned, expressed as milliseconds since the UNIX
            epoch.
          required: false
          schema:
            type: string
  /rest/api/3/webhook/refresh:
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Extend webhook life
      description: >-
        Webhooks registered through the REST API expire after 30 days. Call this
        resource periodically to keep them alive.


        Unrecognized webhook IDs (nonexistent or belonging to other apps) are ignored.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation.
      parameters: []
  /rest/api/3/workflow:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all workflows
      description: >-
        Returns all workflows in Jira or a workflow. Deprecated, use [Get
        workflows paginated](#api-rest-api-3-workflow-search-get).


        If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of the workflow to be returned. Only one workflow can be
            specified.
          required: false
          schema:
            type: string
  /rest/api/3/workflow/rule/config:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflow transition rule configurations
      description: >-
        Returns a [paginated](#pagination) list of workflows with transition
        rules. The workflows can be filtered to return only those containing
        workflow transition rules:

         *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
         *  matching one or more transition rule keys.

        Only workflows containing transition rules created by the calling Connect app are returned. However, if a workflow is returned all transition rules that match the filters are returned for that workflow.


        Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.


        **[Permissions](#permissions) required:** Only Connect apps can use this operation.
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: types
          description: The types of the transition rules to return.
          required: true
          schema:
            type: string
        - in: query
          name: keys
          description: The transition rule class keys, as defined in the Connect app
            descriptor, of the transition rules to return.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information in the
            response. This parameter accepts `transition`, which, for each rule,
            returns information about the transition the rule is assigned to.
          required: false
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update workflow transition rule configurations
      description: >-
        Updates configuration of workflow transition rules. The following rule
        types are supported:

         *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
         *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
         *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)

        Only rules created by the calling Connect app can be updated.


        **[Permissions](#permissions) required:** Only Connect apps can use this operation.
      parameters: []
  /rest/api/3/workflow/search:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflows paginated
      description: >-
        Returns a [paginated](#pagination) list of published classic workflows.
        When workflow names are specified, details of those workflows are
        returned. Otherwise, all published classic workflows are returned.


        This operation does not return next-gen workflows.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
        - in: query
          name: workflowName
          description: The name of a workflow to return.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: >-
            Use [expand](#expansion) to include additional information in the
            response. This parameter accepts a comma-separated list. Expand
            options include:

             *  `transitions` For each workflow, returns information about the transitions inside the workflow.
             *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
             *  `statuses` For each workflow, returns information about the statuses inside the workflow.
             *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
          required: false
          schema:
            type: string
  "/rest/api/3/workflow/transitions/{transitionId}/properties":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete workflow transition property
      description: >-
        Deletes a property from a workflow transition. Transition properties are
        used to change the behavior of a transition. For more information, see
        [Transition
        properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: key
          description: The name of the transition property to delete, also known as the
            name of the property.
          required: true
          schema:
            type: string
        - in: query
          name: workflowName
          description: The name of the workflow that the transition belongs to.
          required: true
          schema:
            type: string
        - in: query
          name: workflowMode
          description: The workflow status. Set to `live` for inactive workflows or `draft`
            for draft workflows. Active workflows cannot be edited.
          required: false
          schema:
            type: string
        - in: path
          name: transitionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflow transition properties
      description: >-
        Returns the properties on a workflow transition. Transition properties
        are used to change the behavior of a transition. For more information,
        see [Transition
        properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: includeReservedKeys
          description: Some properties with keys that have the *jira.* prefix are reserved,
            which means they are not editable. To include these properties in
            the results, set this parameter to *true*.
          required: false
          schema:
            type: string
        - in: query
          name: key
          description: The key of the property being returned, also known as the name of
            the property. If this parameter is not specified, all properties on
            the transition are returned.
          required: false
          schema:
            type: string
        - in: query
          name: workflowName
          description: The name of the workflow that the transition belongs to.
          required: true
          schema:
            type: string
        - in: query
          name: workflowMode
          description: The workflow status. Set to *live* for active and inactive
            workflows, or *draft* for draft workflows.
          required: false
          schema:
            type: string
        - in: path
          name: transitionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create workflow transition property
      description: >-
        Adds a property to a workflow transition. Transition properties are used
        to change the behavior of a transition. For more information, see
        [Transition
        properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: key
          description: The key of the property being added, also known as the name of the
            property. Set this to the same value as the `key` defined in the
            request body.
          required: true
          schema:
            type: string
        - in: query
          name: workflowName
          description: The name of the workflow that the transition belongs to.
          required: true
          schema:
            type: string
        - in: query
          name: workflowMode
          description: The workflow status. Set to *live* for inactive workflows or *draft*
            for draft workflows. Active workflows cannot be edited.
          required: false
          schema:
            type: string
        - in: path
          name: transitionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update workflow transition property
      description: >-
        Updates a workflow transition by changing the property value. Trying to
        update a property that does not exist results in a new property being
        added to the transition. Transition properties are used to change the
        behavior of a transition. For more information, see [Transition
        properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: key
          description: The key of the property being updated, also known as the name of the
            property. Set this to the same value as the `key` defined in the
            request body.
          required: true
          schema:
            type: string
        - in: query
          name: workflowName
          description: The name of the workflow that the transition belongs to.
          required: true
          schema:
            type: string
        - in: query
          name: workflowMode
          description: The workflow status. Set to `live` for inactive workflows or `draft`
            for draft workflows. Active workflows cannot be edited.
          required: false
          schema:
            type: string
        - in: path
          name: transitionId
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/workflowscheme:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get all workflow schemes
      description: >-
        Returns a [paginated](#pagination) list of all workflow schemes, not
        including draft workflow schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: startAt
          description: The index of the first item to return in a page of results (page
            offset).
          required: false
          schema:
            type: string
        - in: query
          name: maxResults
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: string
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create workflow scheme
      description: >-
        Creates a workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  /rest/api/3/workflowscheme/project:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflow scheme project associations
      description: >-
        Returns a list of the workflow schemes associated with a list of
        projects. Each returned workflow scheme includes a list of the requested
        projects associated with it. Any next-gen or non-existent projects in
        the request are ignored and no errors are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: projectId
          description: "The ID of a project to return the workflow schemes for. To include
            multiple projects, provide an ampersand-Jim: oneseparated list. For
            example, `projectId=10000&projectId=10001`."
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Assign workflow scheme to project
      description: >-
        Assigns a workflow scheme to a project. This operation is performed only
        when there are no issues in the project.


        Workflow schemes can only be assigned to classic projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters: []
  "/rest/api/3/workflowscheme/{id}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete workflow scheme
      description: >-
        Deletes a workflow scheme. Note that a workflow scheme cannot be deleted
        if it is active (that is, being used by at least one project).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflow scheme
      description: >-
        Returns a workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: returnDraftIfExists
          description: Returns the workflow scheme's draft rather than scheme itself, if
            set to true. If the workflow scheme does not have a draft, then the
            workflow scheme is returned.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update workflow scheme
      description: >-
        Updates a workflow scheme, including the name, default workflow, issue
        type to project mappings, and more. If the workflow scheme is active
        (that is, being used by at least one project), then a draft workflow
        scheme is created or updated instead, provided that
        `updateDraftIfNeeded` is set to `true`.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/createdraft":
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Create draft workflow scheme
      description: >-
        Create a draft workflow scheme from an active workflow scheme, by
        copying the active workflow scheme. Note that an active workflow scheme
        can only have one draft workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/default":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete default workflow
      description: >-
        Resets the default workflow for a workflow scheme. That is, the default
        workflow is set to Jira's system workflow (the *jira* workflow).


        Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: updateDraftIfNeeded
          description: Set to true to create or update the draft of a workflow scheme and
            delete the mapping from the draft, when the workflow scheme cannot
            be edited. Defaults to `false`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get default workflow
      description: >-
        Returns the default workflow for a workflow scheme. The default workflow
        is the workflow that is assigned any issue types that have not been
        mapped to any other workflow. The default workflow has *All Unassigned
        Issue Types* listed in its issue types for the workflow scheme in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: returnDraftIfExists
          description: Set to `true` to return the default workflow for the workflow
            scheme's draft rather than scheme itself. If the workflow scheme
            does not have a draft, then the default workflow for the workflow
            scheme is returned.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update default workflow
      description: >-
        Sets the default workflow for a workflow scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/draft":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete draft workflow scheme
      description: >-
        Deletes a draft workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get draft workflow scheme
      description: >-
        Returns the draft workflow scheme for an active workflow scheme. Draft
        workflow schemes allow changes to be made to the active workflow
        schemes: When an active workflow scheme is updated, a draft copy is
        created. The draft is modified, then the changes in the draft are copied
        back to the active workflow scheme. See [Configuring workflow
        schemes](https://confluence.atlassian.com/x/tohKLg) for more
        information.  

        Note that:

         *  Only active workflow schemes can have draft workflow schemes.
         *  An active workflow scheme can only have one draft workflow scheme.

        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update draft workflow scheme
      description: >-
        Updates a draft workflow scheme. If a draft workflow scheme does not
        exist for the active workflow scheme, then a draft is created. Note that
        an active workflow scheme can only have one draft workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/draft/default":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete draft default workflow
      description: >-
        Resets the default workflow for a workflow scheme's draft. That is, the
        default workflow is set to Jira's system workflow (the *jira* workflow).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get draft default workflow
      description: >-
        Returns the default workflow for a workflow scheme's draft. The default
        workflow is the workflow that is assigned any issue types that have not
        been mapped to any other workflow. The default workflow has *All
        Unassigned Issue Types* listed in its issue types for the workflow
        scheme in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Update draft default workflow
      description: >-
        Sets the default workflow for a workflow scheme's draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete workflow for issue type in draft workflow scheme
      description: >-
        Deletes the issue type-workflow mapping for an issue type in a workflow
        scheme's draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueType
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflow for issue type in draft workflow scheme
      description: >-
        Returns the issue type-workflow mapping for an issue type in a workflow
        scheme's draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueType
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set workflow for issue type in draft workflow scheme
      description: >-
        Sets the workflow for an issue type in a workflow scheme's draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueType
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/draft/workflow":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue types for workflow in draft workflow scheme
      description: >-
        Deletes the workflow-issue type mapping for a workflow in a workflow
        scheme's draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of the workflow.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue types for workflows in draft workflow scheme
      description: >-
        Returns the workflow-issue type mappings for a workflow scheme's draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of a workflow in the scheme. Limits the results to the
            workflow-issue type mapping for the specified workflow.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set issue types for workflow in workflow scheme
      description: >-
        Sets the issue types for a workflow in a workflow scheme's draft. The
        workflow can also be set as the default workflow for the draft workflow
        scheme. Unmapped issues types are mapped to the default workflow.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of the workflow.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete workflow for issue type in workflow scheme
      description: >-
        Deletes the issue type-workflow mapping for an issue type in a workflow
        scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: updateDraftIfNeeded
          description: Set to true to create or update the draft of a workflow scheme and
            update the mapping in the draft, when the workflow scheme cannot be
            edited. Defaults to `false`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueType
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get workflow for issue type in workflow scheme
      description: >-
        Returns the issue type-workflow mapping for an issue type in a workflow
        scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: returnDraftIfExists
          description: Returns the mapping from the workflow scheme's draft rather than the
            workflow scheme, if set to true. If no draft exists, the mapping
            from the workflow scheme is returned.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueType
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set workflow for issue type in workflow scheme
      description: >-
        Sets the workflow for an issue type in a workflow scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: issueType
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/api/3/workflowscheme/{id}/workflow":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete issue types for workflow in workflow scheme
      description: >-
        Deletes the workflow-issue type mapping for a workflow in a workflow
        scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of the workflow.
          required: true
          schema:
            type: string
        - in: query
          name: updateDraftIfNeeded
          description: Set to true to create or update the draft of a workflow scheme and
            delete the mapping from the draft, when the workflow scheme cannot
            be edited. Defaults to `false`.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get issue types for workflows in workflow scheme
      description: >-
        Returns the workflow-issue type mappings for a workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of a workflow in the scheme. Limits the results to the
            workflow-issue type mapping for the specified workflow.
          required: false
          schema:
            type: string
        - in: query
          name: returnDraftIfExists
          description: Returns the mapping from the workflow scheme's draft rather than the
            workflow scheme, if set to true. If no draft exists, the mapping
            from the workflow scheme is returned.
          required: false
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set issue types for workflow in workflow scheme
      description: >-
        Sets the issue types for a workflow in a workflow scheme. The workflow
        can also be set as the default workflow for the workflow scheme.
        Unmapped issues types are mapped to the default workflow.


        Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      parameters:
        - in: query
          name: workflowName
          description: The name of the workflow.
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/api/3/worklog/deleted:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get IDs of deleted worklogs
      description: >-
        Returns a list of IDs and delete timestamps for worklogs deleted after a
        date and time.


        This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.


        This resource does not return worklogs deleted during the minute preceding the request.


        **[Permissions](#permissions) required:** Permission to access Jira.
      parameters:
        - in: query
          name: since
          description: The date and time, as a UNIX timestamp in milliseconds, after which
            deleted worklogs are returned.
          required: false
          schema:
            type: string
  /rest/api/3/worklog/list:
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Get worklogs
      description: >-
        Returns worklog details for a list of worklog IDs.


        The returned list of worklogs is limited to 1000 items.


        **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

         *  the worklog is set as *Viewable by All Users*.
         *  the user is a member of a project role or group with permission to view the worklog.
      parameters:
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            worklogs in the response. This parameter accepts `properties` that
            returns the properties of each worklog.
          required: false
          schema:
            type: string
  /rest/api/3/worklog/updated:
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get IDs of updated worklogs
      description: >-
        Returns a list of IDs and update timestamps for worklogs updated after a
        date and time.


        This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.


        This resource does not return worklogs updated during the minute preceding the request.


        **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

         *  the worklog is set as *Viewable by All Users*.
         *  the user is a member of a project role or group with permission to view the worklog.
      parameters:
        - in: query
          name: since
          description: The date and time, as a UNIX timestamp in milliseconds, after which
            updated worklogs are returned.
          required: false
          schema:
            type: string
        - in: query
          name: expand
          description: Use [expand](#expansion) to include additional information about
            worklogs in the response. This parameter accepts `properties` that
            returns the properties of each worklog.
          required: false
          schema:
            type: string
  "/rest/atlassian-connect/1/addons/{addonKey}/properties":
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get app properties
      description: >-
        Gets all the properties of an app.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
      parameters:
        - in: path
          name: addonKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}":
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Delete app property
      description: >-
        Deletes an app's property.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
      parameters:
        - in: path
          name: addonKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get app property
      description: >-
        Returns the key and value of an app's property.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
      parameters:
        - in: path
          name: addonKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
    put:
      responses:
        default:
          description: default
          schema: {}
      summary: Set app property
      description: >-
        Sets the value of an app's property. Use this resource to store custom
        data for your app.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
      parameters:
        - in: path
          name: addonKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
        - in: path
          name: propertyKey
          description: Generated by shuffler.io OpenAPI
          required: true
          schema:
            type: string
  /rest/atlassian-connect/1/app/module/dynamic:
    delete:
      responses:
        default:
          description: default
          schema: {}
      summary: Remove modules
      description: >-
        Remove all or a list of modules registered by the calling app.


        **[Permissions](#permissions) required:** Only Connect apps can make this request.
      parameters:
        - in: query
          name: moduleKey
          description: >-
            The key of the module to remove. To include multiple module keys,
            provide multiple copies of this parameter.

            For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.

            Nonexistent keys are ignored.
          required: false
          schema:
            type: string
    get:
      responses:
        default:
          description: default
          schema: {}
      summary: Get modules
      description: >-
        Returns all modules registered dynamically by the calling app.


        **[Permissions](#permissions) required:** Only Connect apps can make this request.
      parameters: []
    post:
      responses:
        default:
          description: default
          schema: {}
      summary: Register modules
      description: >-
        Registers a list of modules.


        **[Permissions](#permissions) required:** Only Connect apps can make this request.
      parameters: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
tags:
  - name: Application roles
  - name: Audit records
  - name: Avatars
  - name: Dashboards
  - name: Filters
  - name: Filter sharing
  - name: Group and user picker
  - name: Groups
  - name: Issues
  - name: Issue attachments
  - name: Issue comments
  - name: Issue comment properties
  - name: Issue fields
  - name: Issue field configurations
  - name: Issue custom field options
  - name: Issue custom field options (apps)
  - name: Issue links
  - name: Issue link types
  - name: Issue navigator settings
  - name: Issue notification schemes
  - name: Issue priorities
  - name: Issue properties
  - name: Issue remote links
  - name: Issue resolutions
  - name: Issue search
  - name: Issue security level
  - name: Issue security schemes
  - name: Issue types
  - name: Issue type schemes
  - name: Issue type screen schemes
  - name: Issue type properties
  - name: Issue votes
  - name: Issue watchers
  - name: Issue worklogs
  - name: Issue worklog properties
  - name: Jira expressions
  - name: Jira settings
  - name: JQL
  - name: Labels
  - name: Myself
  - name: Permissions
  - name: Permission schemes
  - name: Projects
  - name: Project avatars
  - name: Project categories
  - name: Project components
  - name: Project email
  - name: Project key and name validation
  - name: Project permission schemes
  - name: Project properties
  - name: Project roles
  - name: Project role actors
  - name: Project types
  - name: Project versions
  - name: Screens
  - name: Server info
  - name: Tasks
  - name: Time tracking
  - name: Users
  - name: User properties
  - name: User search
  - name: Webhooks
  - name: Workflows
  - name: Workflow transition rules
  - name: Workflow schemes
  - name: Workflow scheme project associations
  - name: Workflow scheme drafts
  - name: Workflow statuses
  - name: Workflow status categories
  - name: Workflow transition properties
  - name: App properties
  - name: Dynamic modules
